/**
 * @license
 * Copyright 2024 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@tensorflow/tfjs-core")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).tf=e.tf||{},e.tf)}(this,(function(e,t){"use strict";function n(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var a=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,a.get?a:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,t}var a=n(t),r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function i(e,t,n,a){return new(n||(n=Promise))((function(r,i){function o(e){try{u(a.next(e))}catch(e){i(e)}}function s(e){try{u(a.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}u((a=a.apply(e,t||[])).next())}))}function o(e,t){var n,a,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&i[0]?a.return:i[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,i[1])).done)return r;switch(a=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,a=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],a=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function s(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],a=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&a>=e.length&&(e=void 0),{value:e&&e[a++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=i.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return o}function c(e,t,n){if(n||2===arguments.length)for(var a,r=0,i=t.length;r<i;r++)!a&&r in t||(a||(a=Array.prototype.slice.call(t,0,r)),a[r]=t[r]);return e.concat(a||Array.prototype.slice.call(t))}var d=t.env();d.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",(function(){return 15})),d.registerFlag("WEBGPU_CPU_FORWARD",(function(){return!0})),d.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",(function(){return-1})),d.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",(function(){return!0})),d.registerFlag("WEBGPU_USE_LOW_POWER_GPU",(function(){return!1})),d.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",(function(){return 1e3})),d.registerFlag("WEBGPU_USE_PROFILE_TOOL",(function(){return!1})),d.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",(function(){return!0})),d.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",(function(){return!1})),d.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",(function(){return-1})),d.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",(function(){return!1})),d.registerFlag("WEBGPU_PRINT_SHADER",(function(){return""})),d.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",(function(){return!1}));var l=function(){function e(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}return e.prototype.getIntelGPUGeneration=function(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0},e.prototype.isIntel=function(){return"intel"===this.vendor},e}(),p=function(){function e(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}return e.prototype.acquireBuffer=function(e,t,n,a){var r;void 0===n&&(n=!1),void 0===a&&(a=!0);var i=h(e,t);return a?(this.freeBuffers.has(i)||this.freeBuffers.set(i,[]),this.freeBuffers.get(i).length>0?(r=this.freeBuffers.get(i).pop(),this.numFreeBuffers--):(r=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e)):(r=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e),this.usedBuffers.has(i)||this.usedBuffers.set(i,[]),this.usedBuffers.get(i).push(r),this.numUsedBuffers++,this.numBytesUsed+=e,r},e.prototype.releaseBuffer=function(e,t){if(void 0===t&&(t=!0),0!==this.freeBuffers.size){var n=e.size,a=h(n,e.usage),r=this.usedBuffers.get(a),i=r.indexOf(e);if(i<0)throw new Error("Cannot find the buffer in buffer manager");r[i]=r[r.length-1],r.pop(),this.numUsedBuffers--,this.numBytesUsed-=n,t?(this.freeBuffers.get(a).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=n)}},e.prototype.getNumUsedBuffers=function(){return this.numUsedBuffers},e.prototype.getNumFreeBuffers=function(){return this.numFreeBuffers},e.prototype.dispose=function(){this.freeBuffers.forEach((function(e,t){e.forEach((function(e){e.destroy()}))})),this.usedBuffers.forEach((function(e,t){e.forEach((function(e){e.destroy()}))})),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0},e}();function h(e,t){return"".concat(e,"_").concat(t)}var f=function(){function e(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}return e.prototype.acquireTexture=function(e,t,n,a){var r=e*t*g(n),i=m(e,t,n,a);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=r,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;var o=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(o),o}this.numBytesAllocated+=r;var s=this.device.createTexture({size:[e,t],format:n,usage:a});return this.usedTextures.get(i).push(s),s},e.prototype.releaseTexture=function(e){if(0!==this.freeTextures.size){var t=e.width,n=e.height,a=e.format,r=m(t,n,a,e.usage);this.freeTextures.has(r)||this.freeTextures.set(r,[]),this.freeTextures.get(r).push(e),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures.get(r),o=i.indexOf(e);if(o<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(o,1);var s=t*n*g(a);this.numBytesUsed-=s}},e.prototype.getNumUsedTextures=function(){return this.numUsedTextures},e.prototype.getNumFreeTextures=function(){return this.numFreeTextures},e.prototype.dispose=function(){this.freeTextures.forEach((function(e,t){e.forEach((function(e){e.destroy()}))})),this.usedTextures.forEach((function(e,t){e.forEach((function(e){e.destroy()}))})),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0},e}();function m(e,t,n,a){return"".concat(e,"_").concat(t,"_").concat(n,"_").concat(a)}function g(e){if("rgba8unorm"===e)return 16;throw new Error("".concat(e," is not supported!"))}function v(e,t){if(Math.max.apply(Math,c([],u(e),!1))>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");var n=e.length,a=e.map((function(e){return"".concat(t,".").concat("xyzwuv"[e])})),r=new Array(n-1);r[n-2]=a[n-1];for(var i=n-3;i>=0;--i)r[i]="(".concat(r[i+1]," * ").concat(a[i+1],")");return r}var y,x=function(e,t,n){return"int32"===n?"atomicAdd(".concat(e,", bitcast<i32>(").concat(t,"));"):"\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (".concat(t,");\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(").concat(e,", oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }")};!function(e){e[e.FROM_PIXELS=0]="FROM_PIXELS",e[e.DRAW=1]="DRAW"}(y||(y={}));var b=function(e,n,a,r,i){var o=function(e,n,a){var r,i,o=[],s=a.workgroupSize[0]*a.workgroupSize[1]*a.workgroupSize[2];if(a.outputComponent=a.outputComponent?a.outputComponent:1,o.push("\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ".concat(N(a)?"  return i32(globalId.x);":"  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ".concat(s,"u +\n                localIndex);\n        "),"\n      }\n    ")),null!=a.pixelsOpType){var u=a.pixelsOpType===y.FROM_PIXELS?"@group(0) @binding(0) var<storage, read_write> result: array<".concat(D(n.dtype,a.outputComponent),">;"):"@group(0) @binding(1) var<storage, read> inBuf : array<".concat(D(e[0].dtype,a.outputComponent),">;"),c=3===n.shape.length?"vec2<i32>":"i32";o.push("\n        struct Uniform {\n          outShapeStrides : ".concat(c,",\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ").concat(u,"\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      "));var d=F(a);return[R,o.join("\n"),z(n.shape),a.getUserCode(),I(d,a)].join("\n")}var l="struct Uniforms { NAN : f32, INFINITY : f32, ";a.variableNames.forEach((function(t,n){var a=C(e[n].shape.length);l+="".concat(t.charAt(0).toLowerCase()+t.slice(1),"Shape : ").concat(a,", "),r=e[n].shape.length-1,i=C(r),l+="".concat(t.charAt(0).toLowerCase()+t.slice(1),"ShapeStrides: ").concat(i,", ")}));var p=C(n.shape.length);l+="outShape : ".concat(p,", "),r=n.shape.length-1,i=C(r),l+="\n         outShapeStrides: ".concat(i,", "),a.size&&(l+="size : i32, ");a.uniforms&&(l+=a.uniforms);l=function(e){var t=/(\w+)\s*:\s*vec(5|6)/g;e=e.replace(t,(function(e){return"@align(16) "+e}));var n=/vec(5|6)\s*,\s*(\w+)/g;return e=e.replace(n,(function(e,t,n){return"vec".concat(t,", @align(16) ").concat(n)}))}(l+="};"),o.push(l),a.atomic?o.push("\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    "):o.push("\n      @group(0) @binding(0) var<storage, read_write> result: array<".concat(D(n.dtype,a.outputComponent),">;\n    "));a.variableNames.forEach((function(t,n){o.push("\n      @group(0) @binding(".concat(1+n,") var<storage, read> ").concat(t,": array<").concat(a.variableComponents?D(e[n].dtype,a.variableComponents[n]):D(e[n].dtype,a.outputComponent),">;\n        "))})),""!==l&&o.push("\n      @group(0) @binding(".concat(1+a.variableNames.length,") var<uniform> uniforms: Uniforms;\n      "));var h=function(e,t){var n=t.x,a=t.y,r=void 0===a?[]:a,i=t.z,o=void 0===i?[]:i,s=e.length,u=n.length+r.length+o.length;if(u!==s)return"";if(n.length===s){var c=C(s);return"fn getOutputCoords() -> ".concat(c,"{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  ")}for(var d="",l=[n,r,o],p=0;p<l.length;p++){var h=l[p];if(0!==h.length)if(1===h.length)d+="let d".concat(h[0]," = i32(globalId[").concat(p,"]);");else{var f=v(h,"uniforms.outShape");d+="var index".concat(p," = i32(globalId[").concat(p,"]);");for(var m=0;m<f.length;m++)d+="let d".concat(h[m]," = index").concat(p," / ").concat(f[m],";"),m===f.length-1?d+="let d".concat(h[m+1]," = ")+"index".concat(p," - d").concat(h[m]," * ").concat(f[m],";"):d+="index".concat(p," = index").concat(p," - d").concat(h[m]," * ").concat(f[m],";")}}var g=[];for(p=0;p<u;p++)g.push("d".concat(p));var y=C(u),x="fn getOutputCoords() -> ".concat(y," {\n  ").concat(d,"\n");0===g.length?x+="return ".concat(y,"(0); }"):x+="return ".concat(y,"(").concat(g.join(","),"); }");return x}(n.shape,a.dispatchLayout),f=[R,o.join("\n")+P,z(n.shape),h,A(n.shape.length)];a.atomic||f.push(function(e,t,n){var a=e.length,r=D(t,n),i="fn setOutputAtIndex(flatIndex : i32, value : ".concat(w(n),") {\n      result[flatIndex] = ").concat(r,"(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ").concat(w(n,"i32"),") {\n      result[flatIndex] = ").concat(r,"(value);\n    }\n    ");if(a>=2){var o=["d0","d1","d2","d3","d4","d5"].slice(0,a),s=C(a);i+="\n      fn setOutputAtCoords(".concat(o.map((function(e){return"".concat(e," : i32")})).join(", "),", value : ").concat(w(n),") {\n        let flatIndex = getOutputIndexFromCoords(").concat(s,"(").concat(o.join(", "),"));\n        setOutputAtIndex(flatIndex").concat(1===n?"":" / ".concat(n),", value);\n      }\n      fn setOutputAtCoordsI32(").concat(o.map((function(e){return"".concat(e," : i32")})).join(", "),", value : ").concat(w(n,"i32"),") {\n        let flatIndex = getOutputIndexFromCoords(").concat(s,"(").concat(o.join(", "),"));\n        setOutputAtIndexI32(flatIndex").concat(1===n?"":" / ".concat(n),", value);\n      }\n    ")}return i}(n.shape,n.dtype,a.outputComponent));a.variableNames.forEach((function(t,n){f.push("".concat(z(e[n].shape,t)))}));var m=e.map((function(e,r){return function(e,n,a,r){var i=function(e,t){var n=e.name,a=e.shape.length,r=C(a),i="get"+n.charAt(0).toUpperCase()+n.slice(1),o=["d0","d1","d2","d3","d4","d5"].slice(0,a),s=o.map((function(e){return"".concat(e," : i32")})).join(", ");if(a<1)return"\n      fn ".concat(i,"() -> ").concat(w(t)," {\n        return ").concat(w(t),"(").concat(n,"[0]);\n      }\n    ");var u="uniforms.".concat(n.charAt(0).toLowerCase()+n.slice(1),"Shape"),c="".concat(a,"D");0===a&&(c="1D");return"\n    fn ".concat(i,"(").concat(s,") -> ").concat(w(t)," {\n      return ").concat(w(t),"(").concat(n,"[getIndexFromCoords").concat(c,"(").concat(r,"(").concat(o.join(","),"),\n        ").concat(u,")").concat(1===t?"":" / ".concat(t),"]);\n    }\n   ")}(e,a);e.shape.length<=n.length&&(i+=function(e,n,a,r){var i=e.name,o=i.charAt(0).toUpperCase()+i.slice(1),s="get"+o+"ByOutput",u=e.shape.length,c=n.length,d=C(c);if(t.util.arraysEqual(e.shape,n)&&r)return"\n    fn ".concat(s,"Index(globalIndex : i32) -> ").concat(w(a)," {\n      return ").concat(w(a),"(").concat(i,"[globalIndex]);\n    }\n\n    fn ").concat(s,"Coords(coords : ").concat(d,") -> ").concat(w(a)," {\n      return ").concat(w(a),"(").concat(i,"[").concat(c>1?"getOutputIndexFromCoords(coords)":"coords").concat(1===a?"":" / ".concat(a),"]);\n    }\n    ");var l=t.backend_util.getBroadcastDims(e.shape,n),p=c-u,h="";if(0===u)return"\n    fn ".concat(s,"Index(globalIndex : i32) -> ").concat(w(a),"{\n      return get").concat(o,"();\n    }\n\n    fn ").concat(s,"Coords(coords : ").concat(d,") -> ").concat(w(a),"{\n      return get").concat(o,"();\n    }\n  ");h=c<2&&l.length>=1?"coords = 0;":l.map((function(e){return"coords.".concat(k(e+p)," = 0;")})).join("\n");var f="";if(c<2&&u>0)f="coords";else if(c>1){var m=C(u),g=e.shape.map((function(e,t){return"coords.".concat(k(t+p))})).join(", ");f="".concat(m,"(").concat(g,")")}else f="coords";var v="uniforms.".concat(i.charAt(0).toLowerCase()+i.slice(1),"Shape"),y="".concat(u,"D");return"\n  fn ".concat(s,"Index(globalIndex : i32) -> ").concat(w(a)," {\n    var coords = getCoordsFromIndex(globalIndex);\n    ").concat(h,"\n    return ").concat(w(a),"(").concat(i,"[getIndexFromCoords").concat(y,"(").concat(f,", ").concat(v,")").concat(1===a?"":" / ".concat(a),"]);\n  }\n\n  fn ").concat(s,"Coords(coordsIn : ").concat(d,") -> ").concat(w(a)," {\n    var coords = coordsIn;\n    ").concat(h,"\n    return ").concat(w(a),"(").concat(i,"[getIndexFromCoords").concat(y,"(").concat(f,", ").concat(v,")").concat(1===a?"":" / ".concat(a),"]);\n  }\n")}(e,n,a,r));return i}(e,n.shape,a.variableComponents?a.variableComponents[r]:a.outputComponent,a.dispatchLayout.x.length===n.shape.length)})).join("\n");f.push(m),f.push(a.getUserCode());var g=F(a);return f.push(I(g,a)),f.join("\n")}(a,{dtype:r.dtype,shape:r.shape},n),s=e.createShaderModule({code:o,label:n.constructor.name}),u=t.env().get("WEBGPU_PRINT_SHADER");if(""!==u){var c=(u=u.toLowerCase()).split(",");("all"===u||c.some((function(e){return n.shaderKey.toLowerCase().includes(e)})))&&(console.group(n.shaderKey),console.debug(o),console.groupEnd())}return i?e.createComputePipelineAsync({compute:{module:s,entryPoint:"_start"},label:n.constructor.name,layout:"auto"}):e.createComputePipeline({compute:{module:s,entryPoint:"_start"},label:n.constructor.name,layout:"auto"})},w=function(e,t){switch(void 0===t&&(t="f32"),e){case 1:return"".concat(t);case 2:return"vec2<".concat(t,">");case 3:return"vec3<".concat(t,">");case 4:return"vec4<".concat(t,">");default:throw new Error("".concat(e,"-component ").concat(t," is not supported."))}};function C(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";if(6===e)return"vec6";throw Error("GPU for rank ".concat(e," is not yet supported"))}function k(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";if(5===e)return"v";throw Error("Index ".concat(e," is not yet supported"))}function S(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];switch(t.length){case 0:e="\n        fn main()\n      ";break;case 1:e="\n        fn main(".concat(t[0]," : i32)\n      ");break;default:throw Error("Unreachable")}return e}function I(e,t){var n;return n="\n     ".concat(function(e){return"\n  @compute @workgroup_size(".concat(e.workgroupSize[0],", ").concat(e.workgroupSize[1],", ").concat(e.workgroupSize[2],")\n")}(t),"\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ").concat(e?"main(getGlobalIndex());":"main();",";\n      }\n    "),n}var R="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n",P="\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n";function z(e,n){void 0===n&&(n="");var a=e.length,r=""!==n?"get".concat(n.charAt(0).toUpperCase()+n.slice(1),"CoordsFromIndex"):"getCoordsFromIndex",i=""!==n?"".concat(n.charAt(0).toLowerCase()+n.slice(1),"ShapeStrides"):"outShapeStrides";if(a<=1)return"fn ".concat(r,"(index : i32) -> i32 { return index; }");for(var o,s=t.util.computeStrides(e),u=C(a),c=[],d=0;d<a;d++)c.push("d".concat(d));return 1===s.length?"    fn ".concat(r,"(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.").concat(i,"; let d1 = index - d0 * uniforms.").concat(i,";\n      return vec2<i32>(d0, d1);\n    }"):(o="var index2 = index;"+s.map((function(e,t){var n="let ".concat(c[t]," = index2 / uniforms.").concat(i,".").concat(k(t)),a=t===s.length-1?"let ".concat(c[t+1]," = index2 - ").concat(c[t]," * uniforms.").concat(i,".").concat(k(t)):"index2 = index2 - ".concat(c[t]," * uniforms.").concat(i,".").concat(k(t));return"".concat(n,"; ").concat(a,";")})).join(""),"\n    fn ".concat(r,"(index : i32) -> ").concat(u," {\n      ").concat(o,"\n      return ").concat(u,"(").concat(c.join(","),");\n    }\n  "))}function A(e){var n="";switch(e){case 0:case 1:n+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:n+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:n+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:n+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:n+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:n+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:t.util.assert(!1,(function(){return"Unsupported ".concat(e,"D shape")}))}return n}function N(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function D(e,t){if(void 0===t&&(t=1),"float32"===e)return w(t,"f32");if("int32"===e||"bool"===e)return w(t,"i32");throw new Error("type ".concat(e," is not supported."))}function F(e){return(!e.dispatchLayout.hasOwnProperty("y")||0===e.dispatchLayout.y.length)&&(!e.dispatchLayout.hasOwnProperty("z")||0===e.dispatchLayout.z.length)}var T,_=function(e){for(var t=1,n=0;n<e.length;n++)t*=e[n];return t};function L(e,t,n,a){void 0===n&&(n=[1,1,1]),void 0===a&&(a=[1,1,1]);var r=u([Math.ceil(_(e.x.map((function(e){return t[e]})))/(n[0]*a[0])),e.y?Math.ceil(_(e.y.map((function(e){return t[e]})))/(n[1]*a[1])):1,e.z?Math.ceil(_(e.z.map((function(e){return t[e]})))/(n[2]*a[2])):1],3);return[r[0],r[1],r[2]]}function W(e,t,n,a){void 0===a&&(a=!1);var r=[8,8,1],i=[4,4,1];return a||(e<=8&&(i[1]=1),t<=16&&n<=16&&(r[0]=4)),{workgroupSize:r,elementsPerThread:i}}function E(e,t,n){if(void 0===n&&(n=!1),n)return[8,8,1];var a=_(e.x.map((function(e){return t[e]}))),r=_(e.y.map((function(e){return t[e]})));return a<=4?[4,16,1]:r<=4?[16,4,1]:[16,16,1]}function B(e,t,n){if(void 0===n&&(n=!1),n)return[4,4,1];var a=_(e.x.map((function(e){return t[e]}))),r=_(e.y.map((function(e){return t[e]})));return a<=4?[1,2,1]:r<=4?[2,1,1]:[2,2,1]}function O(e){return{x:e.map((function(e,t){return t}))}}function U(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw new Error("Unknown dtype ".concat(e))}function M(){return!("undefined"==typeof globalThis||!globalThis.navigator||!globalThis.navigator.gpu)}function V(e,n){Array.isArray(e)||(e=[e]),e.forEach((function(e){null!=e&&t.util.assert("complex64"!==e.dtype,(function(){return"".concat(n," does not support complex64 tensors ")+"in the WebGPU backend."}))}))}!function(e){e[e.MatMulReduceProgram=0]="MatMulReduceProgram",e[e.MatMulSplitKProgram=1]="MatMulSplitKProgram",e[e.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",e[e.MatMulPackedProgram=3]="MatMulPackedProgram",e[e.MatMulMax=4]="MatMulMax"}(T||(T={}));var G,H={__proto__:null,GPUBytesPerElement:U,get MatMulProgramType(){return T},assertNotComplex:V,computeDispatch:L,computeWorkPerThreadForConv2d:B,computeWorkgroupInfoForMatMul:W,computeWorkgroupSizeForConv2d:E,flatDispatchLayout:O,isWebGPUSupported:M,tilesFitEvenlyIntoShape:function(e,t){if(e.length!==t.length)throw new Error("Cannot compute whether rank ".concat(e.length)+" tiles fit evenly into rank ".concat(t.length," shape")+" - ranks must match.");return t.every((function(t,n){return t%e[n]==0}))}},X=t.env().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),K=function(e){function n(n,a){var r=e.call(this)||this;if(r.commandQueueOwnedIds=new WeakSet,r.dispatchCountInPass=0,r.disposed=!1,r.downloadWaitMs=0,r.tensorDataPendingDisposal=[],r.queryResolveBuffer=null,r.querySet=null,r.querySetCount=2,r.stagingPendingDisposal=[],r.uniformPendingDisposal=[],r.uploadWaitMs=0,r.hasReadSyncWarned=!1,r.hasTimestampQueryWarned=!1,!M())throw new Error("WebGPU is not supported on this device");return r.pipelineCache={},r.device=n,r.queue=n.queue,r.commandEncoder=null,r.computePassEncoder=null,r.adapterInfo=new l(a),r.supportTimestampQuery=r.device.features.has("timestamp-query"),r.thresholdToIncreaseWorkgroups=r.adapterInfo.intelGPUGeneration>=12?16:8,r.bufferManager=new p(r.device),r.textureManager=new f(r.device),r.tensorMap=new t.DataStorage(r,t.engine()),t.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(r.dummyCanvas=document.createElement("canvas"),r.dummyCanvas.width=1,r.dummyCanvas.height=1,r.dummyContext=r.dummyCanvas.getContext("webgpu"),r.dummyContext.configure({device:n,format:"bgra8unorm"}),document.body.appendChild(r.dummyCanvas)),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(n,e),n.prototype.nextDataId=function(){return n.nextDataId++},n.prototype.floatPrecision=function(){return 32},n.prototype.disposeData=function(e,t){if(void 0===t&&(t=!1),!this.tensorMap.has(e))return!0;var n=this.tensorMap.get(e);return t?n.refCount=0:n.refCount--,!(n.refCount>0)&&(null!=n.complexTensorInfos&&(this.disposeData(n.complexTensorInfos.real.dataId),this.disposeData(n.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),!0):(this.releaseResource(e),this.tensorMap.delete(e),!0))},n.prototype.memory=function(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}},n.prototype.releaseResource=function(e){var t=this.tensorMap.get(e);t&&t.resource&&(t.external||(t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource)),t.resource=null)},n.prototype.refCount=function(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0},n.prototype.incRef=function(e){this.tensorMap.get(e).refCount++},n.prototype.decRef=function(e){this.tensorMap.has(e)&&this.tensorMap.get(e).refCount--},n.prototype.write=function(e,t,n){if("complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var a={id:this.nextDataId()};return this.tensorMap.set(a,{dtype:n,shape:t,values:e,refCount:1}),a},n.prototype.move=function(e,t,n,a,r){if("complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:a,shape:n,values:t,refCount:r})},n.prototype.submitQueue=function(){var e=this;this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach((function(t){e.releaseResource(t),e.tensorMap.delete(t)})),this.uniformPendingDisposal.forEach((function(t){return e.bufferManager.releaseBuffer(t)})),this.stagingPendingDisposal.forEach((function(t){return e.bufferManager.releaseBuffer(t,!1)})),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]},n.prototype.ensureCommandEncoderReady=function(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())},n.prototype.endComputePassEncoder=function(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)},n.prototype.checkCompileCompletionAsync=function(){return i(this,void 0,void 0,(function(){var e,t,n=this;return o(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),[4,Promise.all(Object.values(this.pipelineCache))];case 1:return e=a.sent(),[3,3];case 2:throw t=a.sent(),new Error(t.message);case 3:return Object.keys(this.pipelineCache).map((function(t,a){n.pipelineCache[t]=e[a]})),[2]}}))}))},n.prototype.getBufferData=function(e){return i(this,void 0,void 0,(function(){var n,a,r;return o(this,(function(i){switch(i.label){case 0:return t.env().getBool("WEBGPU_ENGINE_COMPILE_ONLY")?(console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),[2,null]):(n=e.size,a=this.bufferManager.acquireBuffer(n,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,a,0,n),this.submitQueue(),[4,a.mapAsync(GPUMapMode.READ)]);case 1:return i.sent(),r=a.getMappedRange().slice(0),a.unmap(),null!=a&&this.bufferManager.releaseBuffer(a),t.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(t.util.assert(void 0!==this.dummyContext,(function(){return"Fail to get context for profiling tool"})),this.dummyContext.getCurrentTexture()),[2,r]}}))}))},n.prototype.convertAndCacheOnCPU=function(e,t){var n=this.tensorMap.get(e);return n.values=t,n.values},n.prototype.readSync=function(e){var n=this,a=this.tensorMap.get(e),r=a.values,i=a.complexTensorInfos;if(null!=r||"string"===a.dtype)return r;if("complex64"===a.dtype){var o=this.readSync(i.real.dataId),s=this.readSync(i.imag.dataId),u=t.util.convertBackendValuesAndArrayBuffer(t.backend_util.mergeRealAndImagArrays(o,s).buffer,"float32");return this.convertAndCacheOnCPU(e,u),u}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));var c=["opaque","premultiplied"],d=a.resource,l=d.size;t.util.assert(l%4==0,(function(){return"Because there is 4 bytes for one pixel, buffer size must be multiple of 4."}));var p=l/4,h=new ArrayBuffer(l),f=256,m=256,g=c.map((function(e){return new OffscreenCanvas(f,m)})),v=new OffscreenCanvas(f,m);this.endComputePassEncoder(),g.map((function(e,t){var a=e.getContext("webgpu");return a.configure({device:n.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:c[t]}),a.getCurrentTexture()})).map((function(e,t){for(var a=function(a,r,i){n.ensureCommandEncoderReady(),n.commandEncoder.copyBufferToTexture({buffer:d,bytesPerRow:1024,offset:i},{texture:e},{width:a,height:r}),n.submitQueue();var o=v.getContext("2d",{willReadFrequently:!0});o.clearRect(0,0,a,r),o.drawImage(g[t],0,0);for(var s=o.getImageData(0,0,a,r).data,u=c[t],l=new Uint8ClampedArray(h,i,a*r*4),p=0;p<l.length;p+=4)if("premultiplied"===u)l[p+3]=s[p+3];else{var f=s[p];l[p]=s[p+2],l[p+1]=s[p+1],l[p+2]=f}},r=Math.floor(p/65536),i=f,o=m,s=0,u=0;u<r;u++)a(i,o,s),s+=262144;var l=p%65536;(o=Math.floor(l/f))>0&&(a(i,o,s),s+=1024*o),(i=l%f)>0&&a(i,1,s)}));var y=t.util.convertBackendValuesAndArrayBuffer(h,a.dtype);return this.convertAndCacheOnCPU(e,y),y},n.prototype.read=function(e){return i(this,void 0,void 0,(function(){var n,a,r,i,s,u,c;return o(this,(function(o){switch(o.label){case 0:if(!this.tensorMap.has(e))throw new Error("Tensor ".concat(e," was not registered!"));return n=this.tensorMap.get(e),null!=(a=n.values)?[2,a]:"complex64"!==n.dtype?[3,2]:[4,Promise.all([this.read(n.complexTensorInfos.real.dataId),this.read(n.complexTensorInfos.imag.dataId)])];case 1:return i=o.sent(),s=i[0],u=i[1],r=t.backend_util.mergeRealAndImagArrays(s,u),[3,4];case 2:return[4,this.getBufferData(n.resource)];case 3:c=o.sent(),r=t.util.convertBackendValuesAndArrayBuffer(c,n.dtype),o.label=4;case 4:return this.convertAndCacheOnCPU(e,r),[2,r]}}))}))},n.prototype.copyBuffer=function(e){var t=e.size,n=e.usage,a=this.bufferManager.acquireBuffer(t,n);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,a,0,t),this.submitQueue(),a},n.prototype.createTensorFromGPUData=function(e,n,a){var r=e.buffer;if("complex64"===a)throw new Error("Cannot write to a complex64 dtype. ");var i={id:this.nextDataId()};this.tensorMap.set(i,{dtype:a,shape:n,values:null,refCount:1,external:e.zeroCopy});var o=this.tensorMap.get(i),s=U(o.dtype)*t.util.sizeFromShape(o.shape);if(e.buffer.size<s)throw new Error("GPUBuffer size(".concat(e.buffer.size,") is smaller than tensor size(").concat(s,")!"));if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(r=this.copyBuffer(r)),o.resource=r,t.engine().makeTensorFromDataId(i,n,a,this)},n.prototype.readToGPU=function(e){var n=this.tensorMap.get(e),a=n.values,r=n.dtype,i=n.shape,o=n.resource;if("complex64"===r)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==o)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");var s=o,u=s.size,c=s.usage,d=this.bufferManager.acquireBuffer(u,c);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(o,0,d,0,u),this.submitQueue();var l=this.makeTensorInfo(i,r),p=t.engine().makeTensorFromTensorInfo(l);return this.tensorMap.get(l.dataId).resource=d,{tensorRef:p,buffer:d}},n.prototype.bufferSync=function(e){var n=this.readSync(e.dataId);if("string"===e.dtype)try{var a=n.map((function(e){return t.util.decodeString(e)}));return t.buffer(e.shape,e.dtype,a)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return t.buffer(e.shape,e.dtype,n)},n.prototype.time=function(e){return i(this,void 0,void 0,(function(){var n,a,r,i,s,u,c;return o(this,(function(o){switch(o.label){case 0:return this.supportTimestampQuery||this.hasTimestampQueryWarned||(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0),n=this.activeTimers,a=[],r=!1,null==this.programTimersStack?(this.programTimersStack=a,r=!0):this.activeTimers.push(a),this.activeTimers=a,e(),i=t.util.flatten(this.activeTimers.map((function(e){return e.query}))).filter((function(e){return null!=e})),s=t.util.flatten(this.activeTimers.map((function(e){return e.name}))).filter((function(e){return null!=e})),this.activeTimers=n,r&&(this.programTimersStack=null),u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},[4,Promise.all(i)];case 1:return c=o.sent(),u.kernelMs=t.util.sum(c),u.getExtraProfileInfo=function(){return c.map((function(e,t){return{name:s[t],ms:e}})).map((function(e){return"".concat(e.name,": ").concat(e.ms)})).join(", ")},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,u]}}))}))},n.prototype.makeTensorInfo=function(e,n,a){return"string"===n&&null!=a&&a.length>0&&t.util.isString(a[0])&&(a=a.map((function(e){return t.util.encodeString(e)}))),{dataId:this.write(a,e,n),shape:e,dtype:n}},n.prototype.tensorToBinding=function(e){if(!e)return null;var t=this.tensorMap.get(e.dataId).resource;return t instanceof GPUBuffer?{buffer:t}:t instanceof GPUTexture?t.createView():t},n.prototype.uploadToGPU=function(e){var n=this.tensorMap.get(e);if(null==n.resource){var a,r=U(n.dtype)*t.util.sizeFromShape(n.shape),i=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(n.values){if("unmapped"===(a=this.bufferManager.acquireBuffer(r,i,!0)).mapState){var o=this.bufferManager.acquireBuffer(r,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),s=o.getMappedRange();"int32"===n.dtype||"bool"===n.dtype?new Int32Array(s).set(n.values):new Float32Array(s).set(n.values),o.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(o,0,a,0,r),this.stagingPendingDisposal.push(o)}else{s=a.getMappedRange();"int32"===n.dtype||"bool"===n.dtype?new Int32Array(s).set(n.values):new Float32Array(s).set(n.values),a.unmap()}n.values=null}else a=this.bufferManager.acquireBuffer(r,i);n.resource=a}},n.prototype.makeUniforms=function(e){var n=0,a=0,r=[],i=1;e.forEach((function(e){var o;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:o=4;break;case 2:o=8;break;case 3:case 4:case 5:case 6:o=16;break;default:t.util.assert(!1,(function(){return"Unsupported ".concat(e.data.length,"D shape")}))}5!==a&&6!==a||(o=16),o>i&&(i=o),n=Math.ceil(n/o)*o,a=e.data.length,r.push(n),n+=4*e.data.length})),n=Math.ceil(n/i)*i;var o=new ArrayBuffer(n);e.forEach((function(e,t){var n=r[t];"int32"===e.type?new Int32Array(o,n,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(o,n,e.data.length).set(e.data):new Float32Array(o,n,e.data.length).set(e.data)}));var s=this.bufferManager.acquireBuffer(n,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(s,0,o,0,n),this.uniformPendingDisposal.push(s),{offset:0,size:n,buffer:s}},n.prototype.runWebGPUProgram=function(e,n,a,r,i){var o=this;if(i||(i=this.makeTensorInfo(e.outputShape,a)),0===t.util.sizeFromShape(i.shape))return this.tensorMap.get(i.dataId).values=t.util.getTypedArrayFromDType(i.dtype,0),i;this.uploadToGPU(i.dataId),e.dispatch=function(e,n){var a=e.limits.maxComputeWorkgroupsPerDimension,r=n.dispatchLayout,i=n.dispatch;if(i.every((function(e){return e<=a})))return i;t.util.assert(i[0]>a&&void 0===r.y&&void 0===r.z,(function(){return"Dispatch size exceeds WebGPU limits in Y or Z dimension."}));var o=Math.ceil(Math.sqrt(i[0]));return o>a?(o=Math.ceil(Math.cbrt(i[0])),t.util.assert(o<=a,(function(){return"Total dispatch size exceeds WebGPU maximum."})),[o,o,o]):[o,o,1]}(this.device,e);var s=n.map((function(t,n){if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return o.uploadToGPU(t.dataId),{dtype:o.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[n]}}));e.shaderKey=function(e,n,a){var r=e.shaderKey;if(null!=e.pixelsOpType)return r;var i=[],o=[];n.forEach((function(e){i.push(e.shape),o.push(e.dtype)})),i.push(a.shape),o.push(a.dtype);var s=n.map((function(e){return t.backend_util.getBroadcastDims(e.shape,a.shape)})),u=n.map((function(e){return t.util.arraysEqual(e.shape,a.shape)})).join("_"),c=s.map((function(e){return e.join("_")})).join(";"),d=N(e)?"flatDispatch":"";return r+"_"+(e.workgroupSize?e.workgroupSize.join(","):"")+i.map((function(e){return e.length})).join(",")+o.join(",")+e.variableNames.join(",")+c+u+d}(e,s,i);var u=t.env().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=b(this.device,e,s,i,u)),e.pipeline=this.pipelineCache[e.shaderKey],u||this.recordAndSubmit(e,i,n,r),i},n.prototype.recordAndSubmit=function(e,n,a,r){var i=this;if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");var o=[],s=[],d="int32";if(null==e.pixelsOpType){o.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),s=a.concat(n).map((function(e){return e.shape}));var l="int32";s.map((function(e){o.push({type:l,data:e});var n=t.util.computeStrides(e);o.push({type:l,data:n})}))}else{var p=t.util.computeStrides(n.shape);o.push({type:d,data:p})}if(e.size){var h=t.util.sizeFromShape(e.outputShape);o.push({type:d,data:[e.outputComponent?h/e.outputComponent:h]})}r&&(o=c(c([],u(o),!1),u(r),!1));var f=c(c([this.tensorToBinding(n)],u(a.map((function(e){return i.tensorToBinding(e)}))),!1),[this.makeUniforms(o)],!1);a.forEach((function(e){i.commandQueueOwnedIds.add(e.dataId)})),this.commandQueueOwnedIds.add(n.dataId);var m=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:f.map((function(e,t){return{binding:t,resource:e}}))}),g=null!=this.activeTimers;this.ensureCommandEncoderReady();var v={};g&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),v.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1},this.computePassEncoder=this.commandEncoder.beginComputePass(v)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(v)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,m),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(g||t.env().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===y.DRAW)&&(this.endComputePassEncoder(),g?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())},n.prototype.getQueryTime=function(){return i(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(a){switch(a.label){case 0:return this.supportTimestampQuery?(null==this.queryResolveBuffer&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0),e=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST),this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,8*this.querySetCount),this.submitQueue(),[4,e.mapAsync(GPUMapMode.READ)]):[2,0];case 1:return a.sent(),t=new BigUint64Array(e.getMappedRange()),n=Number(t[1]-t[0])/1e6,e.unmap(),this.bufferManager.releaseBuffer(e),[2,n]}}))}))},n.prototype.shouldExecuteOnCPU=function(e,n){var a=this;return void 0===n&&(n=X),t.env().getBool("WEBGPU_CPU_FORWARD")&&e.every((function(e){return null==a.tensorMap.get(e.dataId).resource&&t.util.sizeFromShape(e.shape)<n}))},n.prototype.numDataIds=function(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length},n.prototype.dispose=function(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)},n}(t.KernelBackend);K.nextDataId=0,M()&&t.registerBackend("webgpu",(function(){return i(void 0,void 0,void 0,(function(){var e,n,a,r,i,s,u,c;return o(this,(function(o){switch(o.label){case 0:return e={powerPreference:t.env().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},[4,navigator.gpu.requestAdapter(e)];case 1:return n=o.sent(),a={},r=[],n.features.has("timestamp-query")&&r.push("timestamp-query"),n.features.has("bgra8unorm-storage")&&r.push(["bgra8unorm-storage"]),a.requiredFeatures=r,i=n.limits,a.requiredLimits={maxComputeWorkgroupStorageSize:i.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:i.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:i.maxStorageBufferBindingSize,maxBufferSize:i.maxBufferSize,maxComputeWorkgroupSizeX:i.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:i.maxComputeInvocationsPerWorkgroup},[4,n.requestDevice(a)];case 2:return s=o.sent(),"info"in n?(u=n.info,[3,7]):[3,3];case 3:return"requestAdapterInfo"in n?[4,n.requestAdapterInfo()]:[3,5];case 4:return c=o.sent(),[3,6];case 5:c=void 0,o.label=6;case 6:u=c,o.label=7;case 7:return[2,new K(s,u)]}}))}))}),3),function(e){e[e.ADD=0]="ADD",e[e.ATAN2=1]="ATAN2",e[e.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",e[e.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",e[e.DIV=4]="DIV",e[e.ELU_DER=5]="ELU_DER",e[e.EQUAL=6]="EQUAL",e[e.FLOOR_DIV=7]="FLOOR_DIV",e[e.GREATER=8]="GREATER",e[e.GREATER_EQUAL=9]="GREATER_EQUAL",e[e.LESS=10]="LESS",e[e.LESS_EQUAL=11]="LESS_EQUAL",e[e.LOGICAL_AND=12]="LOGICAL_AND",e[e.LOGICAL_OR=13]="LOGICAL_OR",e[e.MAX=14]="MAX",e[e.MIN=15]="MIN",e[e.MOD=16]="MOD",e[e.MUL=17]="MUL",e[e.NOT_EQUAL=18]="NOT_EQUAL",e[e.POW=19]="POW",e[e.PRELU=20]="PRELU",e[e.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",e[e.SUB=22]="SUB"}(G||(G={}));var q;function Y(e,t){var n;do{switch(e){case G.ATAN2:n="let resultTemp = atan2(a, b);";break;case G.MAX:n="let resultTemp = max(a, b);";break;case G.MIN:n="let resultTemp = min(a, b);";break;case G.MOD:n=t?"\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n":"\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n";break;case G.NOT_EQUAL:n=t?"\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n":"\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n";break;case G.POW:n=t?"\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n":"\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n";break;default:continue}var a=void 0,r=void 0,i=void 0;return t?(a="isnanVec4",r="vec4<f32>",i="vec4<bool>"):(a="isnan",r="f32",i="bool"),"\n      let aIsNaN = ".concat(a,"(a);\n      let aPostLegalization = select(a, ").concat(r,"(42), aIsNaN);\n      let bIsNaN = ").concat(a,"(b);\n      let bPostLegalization = select(b, ").concat(r,"(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ").concat(n,"\n        return select(\n            resultTemp, ").concat(r,"(valueForNaN),\n            ").concat(i,"(isNaN) | aIsNaN | bIsNaN);\n      }\n    ")}while(0);switch(e){case G.ADD:n="let resultTemp = a + b;";break;case G.COMPLEX_MULTIPLY_IMAG:n="let resultTemp = areal * bimag + aimag * breal;";break;case G.COMPLEX_MULTIPLY_REAL:n="let resultTemp = areal * breal - aimag * bimag;";break;case G.DIV:n="let resultTemp = a / b;";break;case G.ELU_DER:n="let resultTemp = select(a * (b + 1.0), a, b >= b - b);";break;case G.EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n";break;case G.FLOOR_DIV:n="\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n";break;case G.GREATER:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n";break;case G.GREATER_EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n";break;case G.LESS:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n";break;case G.LESS_EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n";break;case G.LOGICAL_AND:return t?"return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));":"return f32(a >= 1.0 && b >= 1.0);";case G.LOGICAL_OR:return t?"return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));":"return f32(a >= 1.0 || b >= 1.0);";case G.MUL:n="let resultTemp = a * b;";break;case G.PRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return b * a; }  return a;";case G.SQUARED_DIFFERENCE:n="let resultTemp = (a - b) * (a - b);";break;case G.SUB:n="let resultTemp = a - b;"}return"\n    ".concat(n,"\n    return resultTemp;\n  ")}!function(e){e[e.ABS=0]="ABS",e[e.ACOS=1]="ACOS",e[e.ACOSH=2]="ACOSH",e[e.ASIN=3]="ASIN",e[e.ASINH=4]="ASINH",e[e.ATAN=5]="ATAN",e[e.ATANH=6]="ATANH",e[e.CEIL=7]="CEIL",e[e.COS=8]="COS",e[e.COSH=9]="COSH",e[e.ELU=10]="ELU",e[e.ERF=11]="ERF",e[e.EXP=12]="EXP",e[e.EXPM1=13]="EXPM1",e[e.FLOOR=14]="FLOOR",e[e.IS_FINITE=15]="IS_FINITE",e[e.IS_INF=16]="IS_INF",e[e.IS_NAN=17]="IS_NAN",e[e.LINEAR=18]="LINEAR",e[e.LOG=19]="LOG",e[e.LOG1P=20]="LOG1P",e[e.LOGICAL_NOT=21]="LOGICAL_NOT",e[e.NEG=22]="NEG",e[e.RELU=23]="RELU",e[e.RELU6=24]="RELU6",e[e.LEAKYRELU=25]="LEAKYRELU",e[e.RECIPROCAL=26]="RECIPROCAL",e[e.ROUND=27]="ROUND",e[e.RSQRT=28]="RSQRT",e[e.SELU=29]="SELU",e[e.SIGMOID=30]="SIGMOID",e[e.SIGN=31]="SIGN",e[e.SIN=32]="SIN",e[e.SINH=33]="SINH",e[e.SOFTPLUS=34]="SOFTPLUS",e[e.SQRT=35]="SQRT",e[e.SQUARE=36]="SQUARE",e[e.STEP=37]="STEP",e[e.TAN=38]="TAN",e[e.TANH=39]="TANH",e[e.TO_INT=40]="TO_INT"}(q||(q={}));var j='\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = '.concat(t.backend_util.ERF_P,";\n  let a1 = ").concat(t.backend_util.ERF_A1,";\n  let a2 = ").concat(t.backend_util.ERF_A2,";\n  let a3 = ").concat(t.backend_util.ERF_A3,";\n  let a4 = ").concat(t.backend_util.ERF_A4,";\n  let a5 = ").concat(t.backend_util.ERF_A5,";\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n"),Q="\n  if (a >= 0.0) {\n    return ".concat(t.backend_util.SELU_SCALE," * a;\n  } else {\n    return ").concat(t.backend_util.SELU_SCALEALPHA," * (exp(a) - 1.0);\n  }\n");function Z(e,t){switch(e){case q.ABS:return"return abs(a);";case q.ACOS:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n";case q.ACOSH:return"\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n";case q.ASIN:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n";case q.ASINH:return"return asinh(a);";case q.ATAN:return"\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n";case q.ATANH:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n";case q.COS:return"return cos(a);";case q.COSH:return"\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n";case q.CEIL:return"return ceil(a);";case q.ELU:return t?"\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n":"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case q.ERF:return j;case q.EXP:return"return exp(a);";case q.EXPM1:return"return exp(a) - 1.0;";case q.FLOOR:return"return floor(a);";case q.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case q.IS_INF:return"return f32(isinf(a));";case q.IS_NAN:return"return f32(isnan(a));";case q.LINEAR:return"return a;";case q.LOG:return"if (a < 0.0) { return uniforms.NAN; }\n  return log(a);";case q.LOG1P:return"\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n";case q.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case q.NEG:return"return -a;";case q.LEAKYRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return uniforms.alpha * a; } return a;";case q.RECIPROCAL:return"return 1.0 / a;";case q.RELU:return t?"\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n":"return select(a, 0.0, a < 0.0);";case q.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case q.ROUND:return"return round(a);";case q.RSQRT:return"return inverseSqrt(a);";case q.SELU:return Q;case q.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case q.SIGN:return"return sign(a);";case q.SIN:return"return sin(a);";case q.SINH:return"\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n";case q.SOFTPLUS:return"\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n";case q.SQRT:return"return sqrt(a);";case q.SQUARE:return"return a * a;";case q.STEP:return"\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n";case q.TAN:return"return tan(a);";case q.TANH:return"\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n";case q.TO_INT:return"return f32(i32((a)));";default:throw new Error("BinaryType ".concat(e," is not implemented!"))}}function J(e,t,n,a){if(void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===a&&(a=3),null===e)return"";var r="";if("linear"===e)r=Z(q.LINEAR);else if("relu"===e)r=Z(q.RELU,n);else if("elu"===e)r=Z(q.ELU,n);else if("relu6"===e)r=Z(q.RELU6,n);else if("prelu"===e)r=Y(G.PRELU,n);else if("sigmoid"===e)r=Z(q.SIGMOID,n);else{if("leakyrelu"!==e)throw new Error("Activation ".concat(e," has not been implemented for the WebGPU backend."));r=Z(q.LEAKYRELU,n)}var i=w(n?4:1);return t?"\n      fn activation(a : ".concat(i,", coords : vec").concat(a,"<i32>) -> ").concat(i," {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ").concat(r,"\n      }"):"\n      fn activation(a : ".concat(i,", coords : vec").concat(a,"<i32>) -> ").concat(i," {\n        ").concat(r,"\n      }")}function $(e,t){return"\n      ".concat(e?"value = value + getBiasByOutputCoords(coords);":"","\n      ").concat(t?"value = activation(value, coords);":"","\n      ")}function ee(e,n,a,r,i,o){void 0===a&&(a=!1),void 0===i&&(i=!1),void 0===o&&(o=1),t.util.assert(e&&1===o||!e,(function(){return"transposeA ".concat(e," is not compatible with component size ").concat(o)}));var s="\n      ".concat(e?"value = getA(batch, col, row);":"value = getA(batch, row, col);","\n\n    "),u=n?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return"\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ".concat(w(o)," {\n    var value = ").concat(w(o),"(0.0);\n    ").concat(a&&i?s:"\n    ".concat(e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])","\n    {\n      ").concat(s,"\n    }\n    "),"\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ").concat(w(o)," {\n    var value = ").concat(w(o),"(0.0);\n    ").concat(u,"\n    return value;\n  }\n  ")}function te(e,t,n,a,r,i,o,s){return void 0===r&&(r=!1),void 0===i&&(i=!1),void 0===o&&(o=!1),void 0===s&&(s=1),"\n  ".concat(ee(n,a,r,0,o,s),"\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ").concat(w(s),") {\n    ").concat(r&&i?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)","\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ").concat($(e,t),"\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  ")}function ne(e,n,a,r,i,o,s){void 0===a&&(a=!1),void 0===r&&(r=32),void 0===i&&(i=!1),void 0===o&&(o=32),void 0===s&&(s=!1);var u=n[1]*e[1],c=n[0]*e[0],d=a?u:r,l=a?r:u,p=d/n[0],h=r/n[1],f=e[1],m=e[0];return t.util.assert((a&&4===p&&4===e[1]||!a&&(3===p||4===p))&&d%n[0]==0&&r%n[1]==0&&4===e[0],(function(){return"If transposeA ".concat(a," is true, innerElementSize ").concat(p," and workPerThread[1] ").concat(e[1]," must be 4.\n          Otherwise, innerElementSize ").concat(p," must be 3 or 4.\n      tileAWidth ").concat(d," must be divisible by workgroupSize[0]").concat(n[0],". tileInner ").concat(r," must be divisible by workgroupSize[1] ").concat(n[1],". colPerThread ").concat(e[0]," must be 4.")})),"\n  var<workgroup> mm_Asub : array<array<vec".concat(p,"<f32>, ").concat(d/p,">, ").concat(l,">;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ").concat(c/e[0],">, ").concat(r,">;\n\n  ").concat(S()," {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ").concat(f,";\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ").concat(f,";\n    let globalCol = i32(globalId.x) * ").concat(m,";\n    let batch = ").concat(i?"0":"i32(globalId.z)",";\n    let batchA = ").concat(i||!s?"batch":"batch % uniforms.aShape[0]",";\n    let batchB = ").concat(i||!s?"batch":"batch % uniforms.bShape[0]",";\n    let globalRowStart = i32(workgroupId.y) * ").concat(u,";\n\n    let numTiles = ").concat(i?"".concat(Math.ceil(o/r)):"(uniforms.dimInner - 1) / ".concat(r," + 1"),";\n    var kStart = ").concat(i?"i32(globalId.z) * ".concat(o):"0",";\n\n    var acc: array<vec4<f32>, ").concat(f,">;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ").concat(h,";\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ").concat(f,"; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ").concat(function(e,t){return e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ".concat(t,");\n        "):"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ".concat(t,");\n        ")}(a,p),"\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ").concat(h,"; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ").concat(r,";\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ").concat(function(e,t,n,a){if(e)return"\n      for (var k = 0; k < ".concat(a,"; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ").concat(n,"; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }");for(var r="",i="",o=0;o<t;o++)r+="let BCached".concat(o," = mm_Bsub[k * ").concat(t," + ").concat(o,"][tileCol];"),i+="acc[i] = fma(BCached".concat(o,", vec4<f32>(ACached[").concat(o,"]), acc[i]);");return"\n      for (var k = 0; k < ".concat(a/t,"; k++) {\n        ").concat(r,"\n        for (var i = 0; i < ").concat(n,"; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ").concat(i,"\n        }\n      }")}(a,p,f,r),"\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ").concat(f,"; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }")}var ae=function(e){return e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        "};function re(e,n,a,r,i,o,s,u){void 0===a&&(a=!1),void 0===r&&(r=32),void 0===i&&(i=!1),void 0===o&&(o=32),void 0===s&&(s=!1),void 0===u&&(u=!1);var c=e[1]*n[1],d=e[0]*n[0],l=a?c:r,p=a?r:c;t.util.assert(p%n[1]==0&&l%n[0]==0&&r%n[1]==0,(function(){return"tileAHight ".concat(p," must be divisible by workgroupSize[1]").concat(n[1],", tileAWidth ").concat(l," must be divisible by workgroupSize[0]").concat(n[0],", tileInner ").concat(r," must be divisible by workgroupSize[1]").concat(n[1])}));var h=p/n[1],f=l/n[0],m=r/n[1],g=e[1],v=e[0],y=s?"\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ".concat(c,";\n      let globalColStart = i32(workgroupId.x) * ").concat(d,";\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ").concat(p,"; inputRow = inputRow + ").concat(n[1],") {\n          for (var inputCol = localCol; inputCol < ").concat(l,"; inputCol = inputCol + ").concat(n[0],") {\n            ").concat(ae(a),"\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ").concat(r,"; inputRow = inputRow + ").concat(n[1],") {\n              for (var inputCol = localCol; inputCol < ").concat(d,"; inputCol = inputCol + ").concat(n[0],") {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ").concat(r,";\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ").concat(v,">;\n        for (var k = 0; k < ").concat(r,"; k++) {\n          for (var inner = 0; inner < ").concat(v,"; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ").concat(n[0],"];\n          }\n          for (var innerRow = 0; innerRow < ").concat(g,"; innerRow++) {\n            let ACached = ").concat(a?"mm_Asub[k][localRow + innerRow * ".concat(n[1],"];"):"mm_Asub[localRow + innerRow * ".concat(n[1],"][k];"),"\n            for (var innerCol = 0; innerCol < ").concat(v,"; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ").concat(g,"; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ").concat(n[1],";\n        for (var innerCol = 0; innerCol < ").concat(v,"; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ").concat(n[0],";\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      "):"\n  let tileRow = i32(localId.y) * ".concat(g,";\n  let tileCol = i32(localId.x) * ").concat(v,";\n\n  let globalRow = i32(globalId.y) * ").concat(g,";\n  let globalCol = i32(globalId.x) * ").concat(v,";\n  let globalRowStart = i32(workgroupId.y) * ").concat(c,";\n\n  let tileRowA = i32(localId.y) * ").concat(h,";\n  let tileColA = i32(localId.x) * ").concat(f,";\n  let tileRowB = i32(localId.y) * ").concat(m,";\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ").concat(h,"; innerRow++) {\n      for (var innerCol = 0; innerCol < ").concat(f,"; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ").concat(ae(a),"\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ").concat(m,"; innerRow++) {\n      for (var innerCol = 0; innerCol < ").concat(v,"; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ").concat(r,";\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ").concat(v,">;\n    for (var k = 0; k < ").concat(r,"; k++) {\n      for (var inner = 0; inner < ").concat(v,"; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ").concat(g,"; innerRow++) {\n        ").concat(function(e){return e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];"}(a),"\n        for (var innerCol = 0; innerCol < ").concat(v,"; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ").concat(g,"; innerRow++) {\n    for (var innerCol = 0; innerCol < ").concat(v,"; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  ");return"\n    var<workgroup> mm_Asub : array<array<f32, ".concat(l,">, ").concat(p,">;\n    var<workgroup> mm_Bsub : array<array<f32, ").concat(d,">, ").concat(r,">;\n\n    ").concat(S()," {\n      let batch = ").concat(i?"0":"i32(globalId.z)",";\n      let batchA = ").concat(i||!u?"batch":"batch % uniforms.aShape[0]",";\n      let batchB = ").concat(i||!u?"batch":"batch % uniforms.bShape[0]",";\n      let numTiles = ").concat(i?"".concat(Math.ceil(o/r)):"(uniforms.dimInner - 1) / ".concat(r," + 1"),";\n      var kStart = ").concat(i?"i32(globalId.z) * ".concat(o):"0",";\n\n      var acc : array<array<f32, ").concat(v,">, ").concat(g,">;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ").concat(g,"; innerRow++) {\n        for (var innerCol = 0; innerCol < ").concat(v,"; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ").concat(y,"\n    }\n  ")}var ie=function(){function e(e,t,n,a,r,i,o,s){var c;void 0===n&&(n=!1),void 0===a&&(a=!1),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=!1),this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};var d=n?e[1]:e[2];if(this.isVec4=(d%4==0&&!n||t[1]%4==0&&n)&&t[2]%4==0&&!a,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===t[1]&&!n,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{var l=W(t[1],d,t[2],n);this.workgroupSize=l.workgroupSize,this.elementsPerThread=l.elementsPerThread}this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);var p=null!=r,h=null!=o;p&&this.variableNames.push("bias"),h&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=s,this.transposeA=n,this.transposeB=a,this.addBias=p,this.activation=i,this.hasPreluActivationWeights=h,c=u(this.getShapeFit(t[1],t[2],d),3),this.fitAOuter=c[0],this.fitBOuter=c[1],this.fitInner=c[2],this.shaderKey="matMulPacked_".concat(this.elementsPerThread,"_").concat(n,"_").concat(a,"_").concat(this.activation,"_").concat(this.fitAOuter,"_").concat(this.fitBOuter,"_").concat(this.fitInner,"_").concat(this.isVec4,"_").concat(this.isVectorA,"_").concat(this.sequentialAccessByThreads)}return e.prototype.getShapeFit=function(e,t,n){var a=this.workgroupSize[1]*this.elementsPerThread[1],r=this.workgroupSize[0]*this.elementsPerThread[0];return!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=r,[e%a==0,t%r==0,n%this.tileInner==0]},e.prototype.getUserCode=function(){var e="\n      ".concat(J(this.activation,this.hasPreluActivationWeights,this.isVec4),"\n      ").concat(te(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1),"\n      ").concat(this.isVec4?ne(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function(e,n){void 0===n&&(n=!1),t.util.assert(1===e[1]&&1===e[2],(function(){return"A linear work group size is required. But got ".concat(e,".")}));var a=4*e[0];return"\n    var<workgroup> mm_Asub : array<vec4<f32>, ".concat(e[0],">;\n\n    ").concat(S()," {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ").concat(a," + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ").concat(a," + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(").concat(function(e){return e?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  "}(n),");\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ").concat(a/4,"; k++) {\n          let rowB = t * ").concat(a," + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  ")}(this.workgroupSize,this.transposeA):re(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0),"\n    ");return e},e}();var oe=function(){function e(e,t,n,a,r,i){void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===a&&(a=null),void 0===r&&(r=null),void 0===i&&(i=null),this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize);var o=null!=a,s=null!=i;o&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=n,this.addBias=o,this.activation=r,this.hasPreluActivationWeights=s,this.shaderKey="matMulReduce_".concat(this.activation,"_").concat(t,"_").concat(n)}return e.prototype.getUserCode=function(){var e;return"\n      ".concat(J(this.activation,this.hasPreluActivationWeights),"\n      ").concat(te(this.addBias,this.activation,this.transposeA,this.transposeB),"\n      ").concat((e=this.workgroupSize[0],"\n    var<workgroup> sumValues : array<f32, ".concat(e,">;\n    ").concat(S()," {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ").concat(e,") {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ").concat(e/2,"u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  ")),"\n    ")},e}();var se=function(){function e(e,t,n,a,r,i,o,s){void 0===a&&(a=!1),void 0===r&&(r=!1),void 0===i&&(i=null),void 0===o&&(o=null),void 0===s&&(s=null),this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=n,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(n[2]/this.workgroupSize[0]),Math.ceil(n[1]/this.workgroupSize[1]),n[0]];var u=null!=i;u&&this.variableNames.push("bias");var c=null!=s;c&&this.variableNames.push("preluActivationWeights"),this.transposeA=a,this.transposeB=r,this.addBias=u,this.activation=o,this.hasPreluActivationWeights=c,this.shaderKey="matMulSmallOutputSize_".concat(this.activation,"_").concat(a,"_").concat(r)}return e.prototype.getUserCode=function(){var e,t,n,a;return"\n      ".concat(J(this.activation,this.hasPreluActivationWeights),"\n      ").concat(te(this.addBias,this.activation,this.transposeA,this.transposeB),"\n      ").concat((e=this.workgroupSize,t=e[1],n=e[0],"\n  var<workgroup> mm_Asub : array<array<f32, ".concat(a=t>n?t:n,">, ").concat(t,">;\n  var<workgroup> mm_Bsub : array<array<f32, ").concat(n,">, ").concat(a,">;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ").concat(S()," {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ").concat(a," + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ").concat(a,";\n    globalRowB = globalRowB + ").concat(a,";\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ").concat(a,";\n      globalRowB = globalRowB + ").concat(a,";\n\n      for (var k = 0; k < ").concat(a,"; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  ")),"\n    ")},e}(),ue=function(){function e(e,n,a,r){void 0===a&&(a=!1),void 0===r&&(r=!1),this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,t.util.assert(1===e[0],(function(){return"MatMulSplitKProgram only supports batch = 1."})),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};var i=(a&&this.outputShape[1]%4==0||!a&&n%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=i?4:1,i||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=L(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],n],this.workgroupSize,this.elementsPerThread),this.transposeA=a,this.transposeB=r,this.shaderKey="matMulSplitK_".concat(a,"_").concat(r,"_").concat(this.elementsPerThread,"_").concat(this.outputComponent)}return e.prototype.getUserCode=function(){var e=this.outputComponent;return"\n      ".concat(ee(!1,this.transposeB,!1,0,!1,e),"\n      fn mm_write(batch: i32, row : i32, col : i32, value : ").concat(w(e),") {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ").concat(e,"; i = i + 1) {\n            ").concat(x("&result[flatIndex + i]","".concat(e>1?"value[i]":"value"),"float32"),"\n          }\n        }\n      }\n      ").concat(4===e?ne(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):re(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner),"\n    ")},e}(),ce=function(){function e(e,t,n,a){void 0===t&&(t=null),void 0===n&&(n=null),void 0===a&&(a=null),this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=a,this.activation=n,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey="biasActivation_".concat(n)}return e.prototype.getUserCode=function(){return"\n    ".concat(J(this.activation,this.hasPreluActivationWeights),"\n    ").concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ").concat($(this.addBias,this.activation),"\n        setOutputAtIndex(index, value);\n      }\n    }\n    ")},e}(),de=function(){function e(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  ")},e}();function le(e){var n=e.backend,a=e.attrs,r=a.shape,i=a.value,o=a.dtype;if("string"===(o=o||t.util.inferDtype(i))){var s=t.util.getArrayFromDType(o,t.util.sizeFromShape(r));return s.fill(i),n.makeTensorInfo(r,o,s)}var u=new de(r),c=[{type:"float32",data:[i]}];return n.runWebGPUProgram(u,[],o,c)}var pe={kernelName:t.Fill,backendName:"webgpu",kernelFunc:le};function he(e){var n=e.inputs,a=e.attrs,r=n.x,i=a.shape,o=t.util.sizeFromShape(r.shape),s=t.util.inferFromImplicitShape(i,o),u=t.util.sizeFromShape(s);return t.util.assert(o===u,(function(){return"The new shape (".concat(s,") has ").concat(u," elements and the old ")+"shape (".concat(r.shape,") has ").concat(o," elements. The new shape and old ")+"shape must have the same number of elements."})),e.backend.incRef(r.dataId),{dataId:r.dataId,shape:s,dtype:r.dtype}}var fe={kernelName:t.Reshape,backendName:"webgpu",kernelFunc:he};function me(e){var n,a,r,i,o=e.a,u=e.b,c=e.transposeA,d=e.transposeB,l=e.backend,p=e.bias,h=void 0===p?null:p,f=e.preluActivationWeights,m=void 0===f?null:f,g=e.leakyreluAlpha,v=void 0===g?0:g,y=e.activation,x=void 0===y?null:y,b=o.shape.length,w=u.shape.length,C=c?o.shape[b-2]:o.shape[b-1],k=d?u.shape[w-1]:u.shape[w-2],S=c?o.shape[b-1]:o.shape[b-2],I=d?u.shape[w-2]:u.shape[w-1],R=o.shape.slice(0,-2),P=u.shape.slice(0,-2),z=t.util.sizeFromShape(R),A=t.util.sizeFromShape(P),N=t.broadcast_util.assertAndGetBroadcastShape(o.shape.slice(0,-2),u.shape.slice(0,-2)).concat([S,I]);t.util.assert(C===k,(function(){return"Error in matMul: inner shapes (".concat(C,") and (")+"".concat(k,") of Tensors with shapes ").concat(o.shape," and ")+"".concat(u.shape," and transposeA=").concat(c)+" and transposeB=".concat(d," must match.")}));var D,F,_=c?[z,C,S]:[z,S,C],L=d?[A,I,k]:[A,k,I],W=he({inputs:{x:o},backend:l,attrs:{shape:_}}),E=he({inputs:{x:u},backend:l,attrs:{shape:L}}),B=[W,E],O=Math.max(z,A),U=[W,E],M=[{type:"int32",data:[S]},{type:"int32",data:[I]},{type:"int32",data:[C]}],V=[O,S,I],G=t.env().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(G<0){var H=t.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),X=H>0?H:l.thresholdToIncreaseWorkgroups,K=O*Math.ceil(S/32)*Math.ceil(I/32);G=K<=X||S<=8&&K<=2*X?O*S*I<=128?T.MatMulReduceProgram:1===O&&k>=2e3?T.MatMulSplitKProgram:T.MatMulSmallOutputSizeProgram:T.MatMulPackedProgram}switch(G){case T.MatMulReduceProgram:D=new oe(V,c,d,h,x,m);break;case T.MatMulSplitKProgram:if(F=le({backend:l,attrs:{shape:V,value:0,dtype:o.dtype}}),D=new ue(V,k,c,d),h||x){F=l.runWebGPUProgram(D,U,o.dtype,M,F);var q=new ce(F.shape,h,x,m),Y=null,j=[F];h&&j.push(h),m&&j.push(m),"leakyrelu"===x&&(Y=[{type:"float32",data:[v]}],q.uniforms+=" alpha : f32,");var Q=l.runWebGPUProgram(q,j,F.dtype,Y);B.push(F);var Z=he({inputs:{x:Q},backend:l,attrs:{shape:N}});B.push(Q);try{for(var J=s(B),$=J.next();!$.done;$=J.next()){var ee=$.value;l.disposeData(ee.dataId)}}catch(e){n={error:e}}finally{try{$&&!$.done&&(a=J.return)&&a.call(J)}finally{if(n)throw n.error}}return Z}break;case T.MatMulSmallOutputSizeProgram:D=new se(_,L,V,c,d,h,x,m);break;case T.MatMulPackedProgram:var te=l.adapterInfo.isIntel();D=new ie(_,V,c,d,h,x,m,te);break;default:throw new Error("Unsupported MatMulProgramType ".concat(G,"."))}h&&U.push(h),m&&U.push(m),"leakyrelu"===x&&(M.push({type:"float32",data:[v]}),D.uniforms+=" alpha : f32,");var ne=he({inputs:{x:F=l.runWebGPUProgram(D,U,o.dtype,M,F)},backend:l,attrs:{shape:N}});B.push(F);try{for(var ae=s(B),re=ae.next();!re.done;re=ae.next()){ee=re.value;l.disposeData(ee.dataId)}}catch(e){r={error:e}}finally{try{re&&!re.done&&(i=ae.return)&&i.call(ae)}finally{if(r)throw r.error}}return ne}var ge={kernelName:t._FusedMatMul,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.a,i=t.b,o=t.bias,s=t.preluActivationWeights,u=a.transposeA,c=a.transposeB,d=a.activation;return me({a:r,b:i,transposeA:u,transposeB:c,backend:n,bias:o,preluActivationWeights:s,leakyreluAlpha:a.leakyreluAlpha,activation:d})}},ve=function(){function e(e,n,a){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=t.backend_util.assertAndGetBroadcastShape(n,a),this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="binaryOpComplex_".concat(e),this.op=e}return e.prototype.getUserCode=function(){var e=Y(this.op,!1);return"\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ".concat(e,"\n      }\n\n      ").concat(S("index")," {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    ")},e}(),ye=function(){function e(e,n,a){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=t.backend_util.assertAndGetBroadcastShape(n,a),this.dispatchLayout=O(this.outputShape),this.op=e,this.useSharedMemoryWithA=n.length<=1&&a.length>1&&n[0]<128,this.useSharedMemoryWithB=a.length<=1&&n.length>1&&a[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?a[0]:n[0],this.shaderKey="binary_".concat(e,"_").concat(this.lastDimensionSize),this.type="shared",this.workgroupSize=[256,1,1];else{var r=n.length>0&&n[n.length-1]%4==0,i=a.length>0&&a[a.length-1]%4==0;r&&i?(this.outputComponent=4,this.variableComponents=[4,4]):r&&(t.util.isScalarShape(a)||1===a[a.length-1])||i&&(t.util.isScalarShape(n)||1===n[n.length-1])?(this.outputComponent=4,this.variableComponents=r?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey="binary_".concat(e,"_").concat(this.variableComponents),this.workgroupSize=[128,1,1]}this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}return e.prototype.getUserCode=function(){var e,t=4===this.outputComponent?"vec4<f32>":"f32",n="\n    fn binaryOperation(a : ".concat(t,", b : ").concat(t,") -> ").concat(t," {\n      ").concat(Y(this.op,4===this.outputComponent),"\n    };\n    ");if("shared"===this.type){var a=this.lastDimensionSize>1?"coords[".concat(this.outputShape.length-1,"]"):"0",r=this.useSharedMemoryWithB?"let a = getAByOutputIndex(index);\n          let b = sharedBuf[".concat(a,"];"):"let a = sharedBuf[".concat(a,"];\n          let b = getBByOutputIndex(index);");e="\n        ".concat(n,"\n        var<workgroup> sharedBuf : array<f32, ").concat(this.lastDimensionSize,">;\n        ").concat(S("index")," {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ").concat(this.lastDimensionSize,") {\n            sharedBuf[localIndex] = f32(").concat(this.useSharedMemoryWithB?"B":"A","[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ").concat(r,"\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        ")}else e="\n       ".concat(n,"\n       ").concat(S("index")," {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ").concat(this.outputComponent,");\n           let a = ").concat(t,"(getAByOutputCoords(coords));\n           let b = ").concat(t,"(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       ");return e},e}();function xe(e){var t=e.inputs.x;return e.backend.incRef(t.dataId),{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}var be={kernelName:t.Identity,backendName:"webgpu",kernelFunc:xe};function we(e){var t=e.inputs,n=e.backend,a=t.real,r=t.imag,i=n.makeTensorInfo(a.shape,"complex64"),o=n.tensorMap.get(i.dataId),s=xe({inputs:{x:a},backend:n}),u=xe({inputs:{x:r},backend:n});return o.complexTensorInfos={real:s,imag:u},i}var Ce={kernelName:t.Complex,backendName:"webgpu",kernelFunc:we},ke=function(){function e(e,t,n){void 0===n&&(n=""),this.variableNames=["A"],this.size=!0;this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==n&&(this.uniforms=n),this.shaderKey="unary_".concat(t)}return e.prototype.getUserCode=function(){return"\n      fn unaryOperation(a : f32) -> f32 {\n        ".concat(Z(this.op,!1),"\n      }\n      ").concat(S("index")," {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      ")},e}();function Se(e){var t=e.opType,n=e.cpuKernelImpl,a=e.dtype;return function(e){var r=e.inputs,i=e.backend,o=r.x,s=i,u=a||o.dtype;if(s.shouldExecuteOnCPU([o])&&null!=n){var c=s.tensorMap.get(o.dataId),d=n(c.values,u);return s.makeTensorInfo(o.shape,u,d)}var l=new ke(o.shape,t);return s.runWebGPUProgram(l,[o],u)}}function Ie(e){var n=e.opType,a=e.cpuKernelImpl,r=e.supportsComplex,i=void 0!==r&&r,o=e.dtype;return function(e){var r,s=e.inputs,c=e.backend,d=s.a,l=s.b,p=c;if(i&&"complex64"===d.dtype){var h=p.tensorMap.get(d.dataId),f=p.tensorMap.get(l.dataId),m=void 0,g=void 0;if(n!==G.MUL)r=u([[h.complexTensorInfos.real,f.complexTensorInfos.real],[h.complexTensorInfos.imag,f.complexTensorInfos.imag]].map((function(e){var a=u(e,2),r=a[0],i=a[1],o={dataId:r.dataId,dtype:r.dtype,shape:d.shape},s={dataId:i.dataId,dtype:i.dtype,shape:l.shape},c=new ye(n,d.shape,l.shape);return p.runWebGPUProgram(c,[o,s],t.upcastType(r.dtype,i.dtype))})),2),m=r[0],g=r[1];else{var v=new ve(G.COMPLEX_MULTIPLY_REAL,d.shape,l.shape),y=new ve(G.COMPLEX_MULTIPLY_IMAG,d.shape,l.shape),x=[{dataId:h.complexTensorInfos.real.dataId,dtype:h.complexTensorInfos.real.dtype,shape:d.shape},{dataId:h.complexTensorInfos.imag.dataId,dtype:h.complexTensorInfos.imag.dtype,shape:d.shape},{dataId:f.complexTensorInfos.real.dataId,dtype:f.complexTensorInfos.real.dtype,shape:l.shape},{dataId:f.complexTensorInfos.imag.dataId,dtype:f.complexTensorInfos.imag.dtype,shape:l.shape}];m=p.runWebGPUProgram(v,x,"float32"),g=p.runWebGPUProgram(y,x,"float32")}var b=we({inputs:{real:m,imag:g},backend:p});return p.disposeData(m.dataId),p.disposeData(g.dataId),b}var w=o||t.upcastType(d.dtype,l.dtype);if(("string"===d.dtype||"string"===l.dtype||p.shouldExecuteOnCPU([d,l]))&&null!=a){h=p.tensorMap.get(d.dataId).values,f=p.tensorMap.get(l.dataId).values;var C="string"===d.dtype?t.backend_util.fromUint8ToStringArray(h):h,k="string"===d.dtype?t.backend_util.fromUint8ToStringArray(f):f,S=u(a(d.shape,l.shape,C,k,w),2),I=S[0],R=S[1];return p.makeTensorInfo(R,w,I)}var P=new ye(n,d.shape,l.shape);return p.runWebGPUProgram(P,[d,l],w)}}function Re(e){return function(n,a,r,i,o){var s=t.backend_util.assertAndGetBroadcastShape(n,a),u=s.length,c=t.util.computeStrides(s),d=t.util.sizeFromShape(s),l=t.util.getTypedArrayFromDType(o,d),p=n.length,h=a.length,f=t.util.computeStrides(n),m=t.util.computeStrides(a),g=t.backend_util.getBroadcastDims(n,s),v=t.backend_util.getBroadcastDims(a,s);if(g.length+v.length===0)for(var y=0;y<l.length;++y)l[y]=e(r[y%r.length],i[y%i.length]);else{var x=function(n){var a=t.util.indexToLoc(n,u,c),o=a.slice(-p);g.forEach((function(e){return o[e]=0}));var s=t.util.locToIndex(o,p,f),d=a.slice(-h);v.forEach((function(e){return d[e]=0}));var y=t.util.locToIndex(d,h,m);l[n]=e(r[s],i[y])};for(y=0;y<l.length;++y)x(y)}return[l,s]}}var Pe=Re((function(e,t){return e+t}));function ze(e){return function(n,a,r){for(var i=t.util.getArrayFromDType(a,n.length),o=0;o<n.length;++o)i[o]=e(n[o],r);return i}}var Ae=ze((function(e){return Math.ceil(e)}));var Ne=Re((function(e,t){return e===t?1:0})),De=ze((function(e){return Math.exp(e)})),Fe=ze((function(e){return Math.expm1(e)})),Te=ze((function(e){return Math.floor(e)})),_e=Re((function(e,t){return Math.floor(e/t)}));var Le=Re((function(e,t){return e>t?1:0})),We=Re((function(e,t){return e>=t?1:0})),Ee=Re((function(e,t){return e<t?1:0})),Be=Re((function(e,t){return e<=t?1:0})),Oe=ze((function(e){return Math.log(e)}));var Ue=Re((function(e,t){return Math.max(e,t)})),Me=Re((function(e,t){return Math.min(e,t)})),Ve=Re((function(e,t){return e*t}));var Ge=Re((function(e,t){return e!==t?1:0}));t.backend_util.RowPartitionType;var He=ze((function(e){return 1/Math.sqrt(e)}));var Xe=function(){function e(e,n,a,r,i,o){this.separator=t.util.encodeString(e),this.nGramWidths=n,this.leftPad=t.util.encodeString(a),this.rightPad=t.util.encodeString(r),this.padWidth=i,this.preserveShort=o}return e.prototype.getPadWidth=function(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)},e.prototype.getNumNGrams=function(e,t){var n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)},e.prototype.createNGrams=function(e,t,n,a,r,i){for(var o=function(o){var u=s.getPadWidth(i),c=Math.max(0,u-o),d=Math.max(0,u-(r-(o+1))),l=i-(c+d),p=t+(c>0?0:o-u),h=0;h+=c*s.leftPad.length;for(var f=0;f<l;++f)h+=e[p+f].length;h+=d*s.rightPad.length,h+=(c+d+l-1)*s.separator.length,n[a+o]=new Uint8Array(h);var m=n[a+o],g=0,v=function(e){return e.forEach((function(e){return m[g++]=e}))};for(f=0;f<c;++f)v(s.leftPad),v(s.separator);for(f=0;f<l-1;++f)v(e[p+f]),v(s.separator);if(l>0){v(e[p+l-1]);for(f=0;f<d;++f)v(s.separator),v(s.rightPad)}else{for(f=0;f<d-1;++f)v(s.rightPad),v(s.separator);v(s.rightPad)}},s=this,u=0;u<r;++u)o(u)},e.prototype.compute=function(e,n){var a=this,r=e.length,i=n.length;if(i>0){var o=n[0];if(0!==o)throw new Error("First split value must be 0, got ".concat(o));for(var s=1;s<i;++s){var u=n[s]>=o;if(!(u=u&&n[s]<=r))throw new Error("Invalid split value ".concat(n[s],", must be in [").concat(o,", ").concat(r,"]"));o=n[s]}if(o!==r)throw new Error("Last split value must be data size. Expected ".concat(r,", got ").concat(o))}var c=i-1,d=t.util.getArrayFromDType("int32",i);if(0===r||0===i){var l=new Array(r);for(s=0;s<=c;++s)d[s]=0;return[l,d]}d[0]=0;var p=function(e){var t=n[e]-n[e-1],r=0;h.nGramWidths.forEach((function(e){r+=a.getNumNGrams(t,e)})),h.preserveShort&&t>0&&0===r&&(r=1),d[e]=d[e-1]+r},h=this;for(s=1;s<=c;++s)p(s);var f=new Array(d[c]),m=function(t){var r=n[t],i=d[t];if(g.nGramWidths.forEach((function(o){var s=n[t+1]-n[t],u=a.getNumNGrams(s,o);a.createNGrams(e,r,f,i,u,o),i+=u})),g.preserveShort&&i===d[t]){var o=n[t+1]-n[t];if(0===o)return"continue";var s=o+2*g.padWidth;g.createNGrams(e,r,f,i,1,s)}},g=this;for(s=0;s<c;++s)m(s);return[f,d]},e}();var Ke=Re((function(e,t){return e-t}));var qe=function(e,t){var n=t.value-e.value;return 0===n?e.index-t.index:n};function Ye(e,n,a,r){for(void 0===a&&(a=0),void 0===r&&(r=e.length-1);r>a;){if(r-a>600){var i=r-a+1,o=n-a+1,s=Math.log(i),u=.5*Math.exp(2*s/3),c=.5*Math.sqrt(s*u*(i-u)/i)*Math.sign(o-i/2);Ye(e,n,Math.max(a,Math.floor(n-o*u/i+c)),Math.min(r,Math.floor(n+(i-o)*u/i+c)))}var d=e[n],l=a,p=r;for(t.util.swap(e,a,n),qe(e[r],d)>0&&t.util.swap(e,a,r);l<p;){for(t.util.swap(e,l,p),l++,p--;qe(e[l],d)<0;)l+=1;for(;qe(e[p],d)>0;)p-=1}0===qe(e[a],d)?t.util.swap(e,a,p):(p+=1,t.util.swap(e,p,r)),p<=n&&(a=p+1),n<=p&&(r=p-1)}}var je=Pe,Qe=function(e,n,a,r){if("int32"===r)return[n,"int32",Int32Array.from(e)];if("bool"===r){var i=t.util.toTypedArray([0],a),o=u(Re((function(e,t){return e!==t?1:0}))(n,[],e,i,"bool"),2),s=o[0];return[o[1],"bool",s]}throw new Error("Error in Cast: failed to cast ".concat(a," to ").concat(r))},Ze=Ae,Je=function(e,n,a,r){var i=t.util.getArrayFromDType(a,t.util.sizeFromShape(n));if(r&&"string"!==a){var o=0;e.forEach((function(e){var n=t.util.sizeFromShape(e.shape);i.set(e.vals,o),o+=n}))}else{var s=0;e.forEach((function(e){for(var r="string"===a?t.backend_util.fromUint8ToStringArray(e.vals):e.vals,o=0,u=0;u<e.shape[0];++u)for(var c=u*n[1]+s,d=0;d<e.shape[1];++d)i[c+d]=r[o++];s+=e.shape[1]}))}return i},$e=Ne,et=De,tt=Fe,nt=Te,at=_e,rt=function(e,n,a,r,i,o,s,d,l){for(var p=t.buffer([r,o],a),h=0;h<r;h++){for(var f=[],m=0,g=0;g<i;g++){var v=e[h*i+g];m+=v*s[g],f.push(v)}if(m<0||m>=l/o)throw new Error("Invalid indices: ".concat(f," does not index into ").concat(d));for(var y=0;y<o;y++)p.values[h*o+y]=n.get.apply(n,c([],u(n.indexToLoc(m*o+y)),!1))}return p},it=function(e,n,a){for(var r=t.buffer(a,e.dtype),i=0;i<r.size;++i){var o=r.indexToLoc(i).slice(),s=o[0],u=o[2],c=n.locToIndex([s,u]);o[2]=n.values[c];var d=e.locToIndex(o);0<=d&&d<e.values.length&&(r.values[i]=e.values[d])}return r},ot=We,st=Le,ut=Be,ct=Ee,dt=Oe,lt=function(e,n,a,r){for(var i=t.util.getTypedArrayFromDType(r,t.util.sizeFromShape(a)),o=0;o<i.length;++o){for(var s=o*n,u=e[s],c=0;c<n;++c){var d=e[s+c];(Number.isNaN(d)||d>u)&&(u=d)}i[o]=u}return i},pt=Ue,ht=Me,ft=Ve,mt=function(e,n,a){var r=t.util.createScalarValue(-1,a);return Ve([],n,r,e,a)},gt=Ge,vt=function(e,n,a,r){for(var i=u(t.backend_util.computeOutAndReduceShapes(e,r),2),o=i[0],s=i[1],c=t.upcastType(n,"int32"),d=t.util.makeZerosTypedArray(t.util.sizeFromShape(o),c),l=t.util.sizeFromShape(s),p=0;p<d.length;++p){for(var h=p*l,f=1,m=0;m<l;++m)f*=a[h+m];d[p]=f}return{outVals:d,outShape:o,outDtype:c}},yt=function(e,n,a,r){if(e===n||e<n&&a<0||n<e&&a>1)return t.util.makeZerosTypedArray(0,r);var i=Math.abs(Math.ceil((n-e)/a)),o=t.util.makeZerosTypedArray(i,r);n<e&&1===a&&(a=-1),o[0]=e;for(var s=1;s<o.length;s++)o[s]=o[s-1]+a;return o},xt=He,bt=function(e,n,a,r,i,o,s,u,c,d){var l=[r/i,i],p=e.values,h=n.values;if(0===r)return t.buffer(a,n.dtype);var f=c instanceof t.TensorBuffer?c:t.buffer(l,n.dtype);"string"==typeof c||"number"==typeof c?f.values.fill(c):"boolean"==typeof c&&f.values.fill(+c);for(var m=0;m<o;m++){for(var g=[],v=0,y=0;y<s;y++){var x=p[m*s+y];g.push(x),v+=x*u[y]}if(v<0||v>=r/i)throw new Error("Invalid indices: ".concat(g," does not index into ").concat(a));for(var b=0;b<i;b++)d?f.values[v*i+b]+=h[m*i+b]:f.values[v*i+b]=0===n.rank?h[0]:h[m*i+b]}return f},wt=function(e){for(var t=new Float32Array(e.length),n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t},Ct=function(e,n,a,r,i){var o=t.slice_util.isSliceContinous(r,n,a),s=t.util.sizeFromShape(a),d=t.util.computeStrides(r);if(o){var l=t.slice_util.computeFlatOffset(n,d);return"string"===i?e.slice(l,l+s):e.subarray(l,l+s)}for(var p="string"===i?t.backend_util.fromUint8ToStringArray(e):e,h=t.buffer(r,i,p),f=t.buffer(a,i),m=0;m<f.size;++m){var g=f.indexToLoc(m),v=g.map((function(e,t){return e+n[t]}));f.set.apply(f,c([h.get.apply(h,c([],u(v),!1))],u(g),!1))}return"string"===i?t.backend_util.fromStringArrayToUint8(f.values):f.values},kt=function(e,n,a,r){for(var i=t.buffer(e,n.dtype),o=0;o<i.size;o++){for(var s=i.indexToLoc(o),d=new Array(s.length),l=0;l<d.length;l++)d[l]=s[l]*a[l]+r[l];i.set.apply(i,c([n.get.apply(n,c([],u(d),!1))],u(s),!1))}return i},St=function(e,t,n,a,r,i,o,s){return new Xe(n,a,r,i,o,s).compute(e,t)},It=Ke,Rt=function(e,n){for(var a=new Array(e.rank),r=0;r<a.length;r++)a[r]=e.shape[r]*n[r];var i=t.buffer(a,e.dtype);for(r=0;r<i.values.length;++r){for(var o=i.indexToLoc(r),s=new Array(e.rank),u=0;u<s.length;u++)s[u]=o[u]%e.shape[u];var c=e.locToIndex(s);i.values[r]=e.values[c]}return i},Pt=function(e,n,a,r,i){for(var o=n[n.length-1],s=u([e.length/o,o],2),c=s[0],d=s[1],l=t.util.getTypedArrayFromDType(a,c*r),p=t.util.getTypedArrayFromDType("int32",c*r),h=function(t){var n=t*d,a=e.subarray(n,n+d),o=new Array(a.length);a.forEach((function(e,t){return o[t]={value:e,index:t}})),r<o.length&&(Ye(o,r),o=o.slice(0,r)),i&&o.sort(qe);for(var s=t*r,u=l.subarray(s,s+r),c=p.subarray(s,s+r),h=0;h<r;h++)u[h]=o[h].value,c[h]=o[h].index},f=0;f<c;f++)h(f);var m=n.slice();return m[m.length-1]=r,[t.buffer(m,a,l),t.buffer(m,"int32",p)]},zt=function(e,n,a,r,i){for(var o=n.length,s=t.util.sizeFromShape(n),u=t.util.computeStrides(n),c=t.util.computeStrides(i),d=t.util.getTypedArrayFromDType(a,t.util.sizeFromShape(i)),l=0;l<s;++l){for(var p=t.util.indexToLoc(l,o,u),h=new Array(p.length),f=0;f<h.length;f++)h[f]=p[r[f]];d[t.util.locToIndex(h,o,c)]=e[l]}return d},At=Se({opType:q.ABS,cpuKernelImpl:wt}),Nt={kernelName:t.Abs,backendName:"webgpu",kernelFunc:At},Dt=Se({opType:q.ACOS}),Ft={kernelName:t.Acos,backendName:"webgpu",kernelFunc:Dt},Tt=Se({opType:q.ACOSH}),_t={kernelName:t.Acosh,backendName:"webgpu",kernelFunc:Tt},Lt=Ie({opType:G.ADD,cpuKernelImpl:je,supportsComplex:!0}),Wt={kernelName:t.Add,backendName:"webgpu",kernelFunc:Lt},Et=function(){function e(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((function(e,t){return"T".concat(t)})),this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}return e.prototype.getUserCode=function(){var e=[];this.variableNames.forEach((function(t){e.push("let v".concat(t," = get").concat(t,"ByOutputCoords(coords);"))}));var t=this.variableNames.map((function(e){return"v".concat(e)})).join(" + ");return"\n      ".concat(S("index")," {\n        for (var i = 0; i < ").concat(this.workPerThread,"; i = i + 1) {\n          let flatIndex = index * ").concat(this.workPerThread," + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ").concat(e.join("\n        "),"\n            setOutputAtIndex(flatIndex, ").concat(t,");\n          }\n        }\n      }\n    ")},e}();var Bt={kernelName:t.AddN,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=n;if(1===r.length)return xe({inputs:{x:r[0]},backend:a});var i=r.map((function(e){return e.dtype})).reduce((function(e,n){return t.upcastType(e,n)})),o=r.map((function(e){return e.shape})),s=new Et(o);return a.runWebGPUProgram(s,r,i)}},Ot=function(){function e(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];for(var n=new Array(e.length),a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.dispatchLayout={x:[0],y:[1]},this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}return e.prototype.getUserCode=function(){var e=this;t.util.assert(this.workgroupSize[0]===this.workgroupSize[1],(function(){return"Must be a square tile, current tile shape is ".concat(e.workgroupSize[0]," x ").concat(e.workgroupSize[1])}));var n=this.workgroupSize[0];return"\n      var<workgroup> tile : array<array<f32, ".concat(this.workgroupSize[0]+1,">, ").concat(this.workgroupSize[0],">;\n      ").concat(S()," {\n        var x = i32(workgroupId.x) * ").concat(n," + i32(localId.x);\n        var y = i32(workgroupId.y) * ").concat(n," + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ").concat(n," + i32(localId.x);\n        y = i32(workgroupId.x) * ").concat(n," + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    ")},e}(),Ut=function(){function e(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;for(var n=new Array(e.length),a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey="transpose_".concat(t)}return e.prototype.getUserCode=function(){var e=C(this.outputShape.length),t=Mt(this.newDim);return"\n      ".concat(S("index")," {\n        for(var i = 0; i < ").concat(this.workPerThread,"; i = i + 1) {\n          let flatIndex = index * ").concat(this.workPerThread," + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords").concat(this.outputShape.length,"D(\n              ").concat(e,"(").concat(t,"), uniforms.aShape)]);\n          }\n        }\n      }\n    ")},e}();function Mt(e){var t=e.length;if(t>6)throw Error("Transpose for rank ".concat(t," is not yet supported"));for(var n=new Array(t),a=0;a<e.length;a++)n[e[a]]="coords.".concat(k(a));return n.join()}function Vt(e){for(var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.perm,s=a,u=i.shape.length,c=new Array(u),d=0;d<c.length;d++)c[d]=i.shape[o[d]];if(a.shouldExecuteOnCPU([i])){var l=s.tensorMap.get(i.dataId).values,p=zt(l,i.shape,i.dtype,o,c);return a.makeTensorInfo(c,i.dtype,p)}if(2===i.shape.length&&t.util.arraysEqual(o,[1,0])){var h=new Ot(i.shape,o);return s.runWebGPUProgram(h,[i],i.dtype)}var f=new Ut(i.shape,o);return s.runWebGPUProgram(f,[i],i.dtype)}var Gt={kernelName:t.Transpose,backendName:"webgpu",kernelFunc:Vt},Ht=function(){function e(e,n,a){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];var r=u(t.backend_util.computeOutAndReduceShapes(this.inputShape,[1]),1)[0];this.outputShape=0===r.length?[1]:r,e.inSize>=32768&&a>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=n,this.shaderKey="reduce_".concat(n)}return e.prototype.getUserCode=function(){var e="",t="0.0",n=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e="\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ".concat("min"===this.reduceType?"<":">"," bestValue)\n           {  bestValue = candidate; }"),t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");var a="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);",r="\n         var<workgroup> xBestValues : array<f32, ".concat(n,">;\n       ");return"\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ".concat(r,"\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ").concat(1===this.outputShape.length?"outputCoords":"outputCoords[0]"," * uniforms.reduceSize;\n          return offset;\n       }\n       ").concat(S("index")," {\n         let outputIndex = index / ").concat(n,";\n         let offset = getOffset(outputIndex);\n         var bestValue = ").concat(t,";\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ").concat(n,"u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ").concat(n,") {\n           let candidate = f32(x[offset + k]);\n           ").concat(e,"\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ").concat(n,"u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ").concat(e,"\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ").concat(a,"\n        }\n       }\n     ")},e}(),Xt={mean:"float32",all:"bool",any:"bool"};function Kt(e,n,a,r,i){var o=e.shape.length,s=[],c=t.util.parseAxisParam(n,e.shape),d=c,l=t.backend_util.getAxesPermutation(d,o),p=e;null!=l&&(p=Vt({inputs:{x:e},attrs:{perm:l},backend:i}),d=t.backend_util.getInnerMostAxes(d.length,o),s.push(p)),t.backend_util.assertAxesAreInnerMostDims(r,d,o);var h,f=u(t.backend_util.computeOutAndReduceShapes(p.shape,d),2),m=f[0],g=f[1],v=m;if(a&&(v=t.backend_util.expandShapeToKeepDim(m,c)),"max"!==r&&"prod"!==r||!i.shouldExecuteOnCPU([p])){var y=t.util.sizeFromShape(g),x={windowSize:y,inSize:y,batchSize:t.util.sizeFromShape(p.shape)/y,outSize:1},b=Xt[r]||t.sumOutType(e.dtype),w=[{type:"int32",data:[y]}],C=new Ht(x,r,i.device.limits.maxComputeWorkgroupSizeX),k=i.runWebGPUProgram(C,[p],b,w);s.push(k),h=he({inputs:{x:k},attrs:{shape:v},backend:i})}else{var S=i.tensorMap.get(p.dataId).values;switch(r){case"max":var I=lt(S,t.util.sizeFromShape(g),v,e.dtype);h=i.makeTensorInfo(v,e.dtype,I);break;case"prod":var R=vt(p.shape,p.dtype,S,d),P=R.outVals,z=R.outShape,A=R.outDtype;h=i.makeTensorInfo(z,A,P);break;default:throw new Error("".concat(r," CPU implementation is not yet supported."))}}return s.forEach((function(e){return i.disposeData(e.dataId)})),h}var qt={kernelName:t.All,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=a.keepDims;return Kt(r,a.axis,i,"all",n)}};var Yt={kernelName:t.Any,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=a.keepDims;return Kt(r,a.axis,i,"any",n)}},jt=function(){function e(e,n,a){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;var r=[n];this.op="min"===a?"<":">";var i=u(t.backend_util.computeOutAndReduceShapes(e,r),2),o=i[0],s=i[1];this.outputShape=0===o.length?[1]:o,this.dispatchLayout=O(this.outputShape),t.util.sizeFromShape(s)<32?(this.type="plain",this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=L(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey="argMinMax_".concat(this.op,"_").concat(this.type)}return e.prototype.getUserCode=function(){var e=this,t=this.workgroupSize[0],n=function(){return 1===e.inputShape.length?"uniforms.xShape":"uniforms.xShape.".concat(k(e.inputShape.length-1))},a=function(){var t="";if(1===e.outputShape.length)1!==e.inputShape.length&&(t+="outputCoords,");else for(var n=0;n<e.outputShape.length;n++)t+="outputCoords.".concat(k(n),",");return t};if("shared"===this.type){var r="\n      var<workgroup> xBestIndices : array<i32, ".concat(t,">;\n      var<workgroup> xBestValues : array<f32, ").concat(t,">;\n    ");return"\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ".concat(r,"\n\n      ").concat(S("index")," {\n        let outputIndex = index / ").concat(t,";\n        let reduceLength = ").concat(n(),";\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ").concat(t,") {\n          let candidate = getX(").concat(a()," k);\n          if (!isnan(candidate) && candidate ").concat(this.op," bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ").concat(t,"u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ").concat(this.op," bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    ")}return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(").concat(a()," 0);\n          let reduceLength = ").concat(n(),";\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(").concat(a()," i);\n            if (candidate ").concat(this.op," bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      ")},e}();var Qt={kernelName:t.ArgMax,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.axis,s=t.util.parseAxisParam(o,i.shape),u=t.backend_util.getAxesPermutation(s,i.shape.length),c=i,d=[];null!=u&&(c=Vt({inputs:{x:i},backend:a,attrs:{perm:u}}),d.push(c),s=t.backend_util.getInnerMostAxes(s.length,c.shape.length)),t.backend_util.assertAxesAreInnerMostDims("argMax",[s[0]],c.shape.length);var l=new jt(c.shape,s[0],"max"),p=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],h=a.runWebGPUProgram(l,[c],"int32",p);return d.forEach((function(e){return a.disposeData(e.dataId)})),h}};var Zt={kernelName:t.ArgMin,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.axis,s=t.util.parseAxisParam(o,i.shape),u=t.backend_util.getAxesPermutation(s,i.shape.length),c=i,d=[];null!=u&&(c=Vt({inputs:{x:i},backend:a,attrs:{perm:u}}),d.push(c),s=t.backend_util.getInnerMostAxes(s.length,c.shape.length)),t.backend_util.assertAxesAreInnerMostDims("argMin",[s[0]],c.shape.length);var l=new jt(c.shape,s[0],"min"),p=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],h=a.runWebGPUProgram(l,[c],"int32",p);return d.forEach((function(e){return a.disposeData(e.dataId)})),h}},Jt=Se({opType:q.ASIN}),$t={kernelName:t.Asin,backendName:"webgpu",kernelFunc:Jt},en=Se({opType:q.ASINH}),tn={kernelName:t.Asinh,backendName:"webgpu",kernelFunc:en},nn=Se({opType:q.ATAN}),an={kernelName:t.Atan,backendName:"webgpu",kernelFunc:nn},rn=Ie({opType:G.ATAN2}),on={kernelName:t.Atan2,backendName:"webgpu",kernelFunc:rn},sn=Se({opType:q.ATANH}),un={kernelName:t.Atanh,backendName:"webgpu",kernelFunc:sn},cn=function(){function e(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    ")},e}(),dn=function(){function e(e,t,n,a,r){if(void 0===n&&(n=!1),void 0===a&&(a=!1),void 0===r&&(r=!1),this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=a,this.includeBatchIndex=r,this.shaderKey="pool2D_".concat(t,"_").concat(n,"_").concat(a,"_").concat(r)}return e.prototype.getUserCode=function(){var e;if("avg"===this.poolType)e="resultValue = resultValue + value; count = count + 1.0;";else if(this.computePositions){var t=this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC";e="let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ".concat(t,";\n      }")}else e="resultValue = max(value, resultValue);";var n="resultValue";return"avg"===this.poolType&&(n="resultValue / max(count, 1.0)"),"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ").concat(this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":"var resultValue = ".concat("avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)",";"),"\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ").concat(e,"\n            }\n          }\n\n          ").concat(this.computePositions?"setOutputAtIndexI32(index, maxPosition);":"setOutputAtIndex(index, ".concat(n,");"),"\n        }\n      }\n    ")},e}(),ln=function(){function e(e,t,n,a,r){if(void 0===n&&(n=!1),void 0===a&&(a=!1),void 0===r&&(r=!1),this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=a,this.includeBatchIndex=r,this.shaderKey="pool3D_".concat(t,"_").concat(n,"_").concat(a,"_").concat(r)}return e.prototype.getUserCode=function(){var e;if("avg"===this.poolType)e="resultValue += value; count += 1.0;";else if(this.computePositions){var t=this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC";e="let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ".concat(t,";\n      }")}else e="resultValue = max(value, resultValue);";var n="resultValue";return"avg"===this.poolType&&(n="resultValue / max(count, 1.0)"),"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ").concat(this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":"var resultValue = ".concat("avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)",";"),"\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ").concat(e,"\n              }\n            }\n          }\n\n          ").concat(this.computePositions?"setOutputAtIndexI32(index, maxPosition);":"setOutputAtIndex(index, ".concat(n,");"),"\n        }\n      }\n    ")},e}();function pn(e){var t=e.inputs,n=e.backend,a=e.attrs;return Kt(t.x,a.reductionIndices,a.keepDims,"max",n)}var hn={kernelName:t.Max,backendName:"webgpu",kernelFunc:pn};function fn(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=a.keepDims;return Kt(r,a.axis,i,"mean",n)}var mn={kernelName:t.Mean,backendName:"webgpu",kernelFunc:fn};function gn(e,n,a,r){if(1===n.filterWidth&&1===n.filterHeight&&t.util.arraysEqual(n.inShape,n.outShape))return xe({inputs:{x:e},backend:r});if(n.filterWidth===n.inWidth&&n.filterHeight===n.inHeight&&1===n.batchSize&&"VALID"===n.padInfo.type){var i=e.shape.length,o=he({inputs:{x:e},backend:r,attrs:{shape:[e.shape[i-3]*e.shape[i-2],e.shape[i-1]]}}),s=void 0;"avg"===a?s=fn({inputs:{x:o},backend:r,attrs:{axis:0,keepDims:!1}}):(t.util.assert("max"===a,(function(){return"Invalid pool type ".concat(a)})),s=pn({inputs:{x:o},backend:r,attrs:{reductionIndices:0,keepDims:!1}}));var u=he({inputs:{x:s},backend:r,attrs:{shape:n.outShape}});return r.disposeData(o.dataId),r.disposeData(s.dataId),u}var c,d=[{type:"int32",data:[n.strideHeight,n.strideWidth]}];return 1===n.filterHeight&&1===n.filterWidth?c=new cn(n):("avg"===a?c=new dn(n,"avg"):(t.util.assert("max"===a,(function(){return"Invalid pool type ".concat(a)})),c=new dn(n,"max")),d.push({type:"int32",data:[n.padInfo.top,n.padInfo.left]},{type:"int32",data:[n.dilationHeight,n.dilationWidth]},{type:"int32",data:[n.inHeight,n.inWidth]},{type:"int32",data:[n.effectiveFilterHeight,n.effectiveFilterWidth]})),r.runWebGPUProgram(c,[e],e.dtype,d)}var vn={kernelName:t.AvgPool,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.filterSize,s=r.strides,u=r.pad,c=r.dimRoundingMode;return gn(i,t.backend_util.computePool2DInfo(i.shape,o,s,1,u,c),"avg",a)}};var yn={kernelName:t.AvgPool3D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.filterSize,s=r.strides,u=r.pad,c=r.dataFormat,d=r.dimRoundingMode,l=t.backend_util.computePool3DInfo(i.shape,o,s,[1,1,1],u,d,c),p=new ln(l,"avg"),h=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.inDepth,l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]}];return a.runWebGPUProgram(p,[i],i.dtype,h)}},xn=function(){function e(e){this.variableNames=["dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    ")},e}(),bn=function(){function e(e){this.variableNames=["dy"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    ")},e}();var wn={kernelName:t.AvgPool3DGrad,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.dy,o=n.input,s=r.filterSize,u=r.strides,c=r.pad,d=r.dimRoundingMode,l=t.backend_util.computePool3DInfo(o.shape,s,u,1,c,d),p=new bn(l),h=1/(l.filterDepth*l.filterHeight*l.filterWidth),f=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.effectiveFilterDepth-1-l.padInfo.front,l.effectiveFilterHeight-1-l.padInfo.top,l.effectiveFilterWidth-1-l.padInfo.left]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"float32",data:[h]}];return a.runWebGPUProgram(p,[i],o.dtype,f)}};var Cn={kernelName:t.AvgPoolGrad,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.dy,o=n.input,s=o;V([i,o],"avgPoolGrad");var u=r.filterSize,c=r.strides,d=r.pad,l=t.backend_util.computePool2DInfo(s.shape,u,c,1,d),p=new xn(l),h=1/(l.filterHeight*l.filterWidth),f=[{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.effectiveFilterHeight-1-l.padInfo.top,l.effectiveFilterWidth-1-l.padInfo.left]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[l.effectiveFilterHeight,l.effectiveFilterWidth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"float32",data:[h]}];return a.runWebGPUProgram(p,[i],s.dtype,f)}};var kn={kernelName:t.BatchMatMul,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs;return me({a:t.a,b:t.b,transposeA:a.transposeA,transposeB:a.transposeB,backend:n})}},Sn=function(){function e(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms="start : ".concat(C(e.length),", "),this.shaderKey="slice"}return e.prototype.getUserCode=function(){var e,t=C(this.rank),n=function(e){if(1===e)return"sourceLoc";if(e<=6)return In.slice(0,e).map((function(e){return"sourceLoc.".concat(e)})).join(",");throw Error("Slicing for rank ".concat(e," is not yet supported"))}(this.rank);return e=1===this.start.length?this.outputShape.map((function(e,t){return"sourceLoc = uniforms.start + coords;"})):this.outputShape.map((function(e,t){return"sourceLoc.".concat(In[t]," = uniforms.start.").concat(k(t)," + coords.").concat(In[t],";")})),"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          var sourceLoc : ").concat(t,";\n          let coords = getCoordsFromIndex(index);\n          ").concat(e.join("\n"),"\n          setOutputAtIndex(index, getSource(").concat(n,"));\n        }\n      }\n    ")},e}(),In=["x","y","z","w","u","v"];function Rn(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.begin,s=r.size,c=u(t.slice_util.parseSliceParams(i,o,s),2),d=c[0],l=c[1];if(t.slice_util.assertParamsValid(i,d,l),a.shouldExecuteOnCPU([i])||"string"===i.dtype){var p=a.tensorMap.get(i.dataId),h=Ct(p.values,d,l,i.shape,i.dtype);return a.makeTensorInfo(l,i.dtype,h)}if(0===t.util.sizeFromShape(l))return a.makeTensorInfo(l,i.dtype,[]);var f=new Sn(d,l),m=[{type:"int32",data:d}];return a.runWebGPUProgram(f,[i],i.dtype,m)}var Pn={kernelName:t.Slice,backendName:"webgpu",kernelFunc:Rn},zn={kernelName:t.BatchToSpaceND,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.blockShape,s=r.crops;t.util.assert(i.shape.length<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet"}));var u=o.reduce((function(e,t){return e*t})),c=t.backend_util.getReshaped(i.shape,o,u),d=t.backend_util.getPermuted(c.length,o.length),l=t.backend_util.getReshapedPermuted(i.shape,o,u),p=t.backend_util.getSliceBeginCoords(s,o.length),h=t.backend_util.getSliceSize(l,s,o.length),f=[],m=he({inputs:{x:i},backend:a,attrs:{shape:c}}),g=Vt({inputs:{x:m},backend:a,attrs:{perm:d}}),v=he({inputs:{x:g},backend:a,attrs:{shape:l}}),y=Rn({inputs:{x:v},backend:a,attrs:{begin:p,size:h}});return f.push(m),f.push(g),f.push(v),f.forEach((function(e){return a.disposeData(e.dataId)})),y}},An="\n  fn bincount_write(index: i32, value: f32) {\n    ".concat(x("&result[index]","value","float32"),"\n  }\n"),Nn=function(){function e(e,t,n){void 0===n&&(n=!1),this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=n,n&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey="bincount_".concat(this.hasWeights,"_").concat(this.binaryOutput,"_").concat(this.rank)}return e.prototype.getUserCode=function(){return"\n    ".concat(this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":An,"\n  ").concat(S("index")," {\n    ").concat(1===this.rank?"if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ".concat(this.binaryOutput?1:this.hasWeights?"getW(index)":"1.",";\n        bincount_write(indexVal, value);\n      }\n    }"):"let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ".concat(this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1.",";\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }"),"\n  }\n  ")},e}();var Dn={kernelName:t.Bincount,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.weights,s=r.size,u=t.util.sizeFromShape(i.shape),c=t.util.sizeFromShape(o.shape)>0,d=[s],l=o.dtype,p=le({backend:a,attrs:{shape:d,value:0,dtype:l}}),h=new Nn([u],c),f=[{type:"int32",data:[s]}],m=c?[i,o]:[i];return a.runWebGPUProgram(h,m,l,f,p)}},Fn=function(){function e(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}return e.prototype.getUserCode=function(){return"\n  ".concat(S("index")," {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  ")},e}();var Tn={kernelName:t.BroadcastArgs,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=n.s0,i=n.s1;if(a.shouldExecuteOnCPU([r,i])){var o=a.tensorMap.get(r.dataId),s=a.tensorMap.get(i.dataId),u=o.values,c=s.values,d=t.backend_util.assertAndGetBroadcastShape(Array.from(u),Array.from(c));return a.makeTensorInfo([d.length],"int32",Int32Array.from(d))}var l=t.util.sizeFromShape(r.shape),p=t.util.sizeFromShape(i.shape),h=Math.max(l,p),f=new Fn(h),m=[{type:"int32",data:[l]},{type:"int32",data:[p]}];return a.runWebGPUProgram(f,[r,i],"int32",m)}},_n=Ie({opType:G.NOT_EQUAL,dtype:"bool",cpuKernelImpl:gt}),Ln={kernelName:t.NotEqual,backendName:"webgpu",kernelFunc:_n};function Wn(e){var t=e.inputs,n=e.backend,a=t.input;return xe({inputs:{x:n.tensorMap.get(a.dataId).complexTensorInfos.real},backend:n})}var En={kernelName:t.Real,backendName:"webgpu",kernelFunc:Wn};var Bn={kernelName:t.Cast,backendName:"webgpu",kernelFunc:function e(n){var r=n.inputs,i=n.backend,o=n.attrs,s=r.x,c=o.dtype;if("complex64"===c){if("complex64"===s.dtype)return xe({inputs:{x:s},backend:i});var d=a.zeros(s.shape),l=e({inputs:{x:s},backend:i,attrs:{dtype:"float32"}}),p=we({inputs:{real:l,imag:d},backend:i});return d.dispose(),i.disposeData(l.dataId),p}if("complex64"===s.dtype){var h=Wn({inputs:{input:s},backend:i}),p=e({inputs:{x:h},backend:i,attrs:{dtype:c}});return i.disposeData(h.dataId),p}if(!t.util.hasEncodingLoss(s.dtype,c))return{dataId:(p=xe({inputs:{x:s},backend:i})).dataId,shape:p.shape,dtype:c};if(i.shouldExecuteOnCPU([s])){var f=i.tensorMap.get(s.dataId).values,m=u(Qe(f,s.shape,s.dtype,c),3),g=m[0],v=m[1],y=m[2];return i.makeTensorInfo(g,v,y)}if("int32"===c)return function(e,t){var n=new ke(e.shape,q.TO_INT),a=t.runWebGPUProgram(n,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(s,i);if("bool"===c){var x=i.makeTensorInfo([],"bool",t.util.getTypedArrayFromDType("bool",1));p=_n({inputs:{a:s,b:x},backend:i});return i.disposeData(x.dataId),p}throw new Error("Error in Cast: failed to cast ".concat(s.dtype," to ").concat(c))}},On=Se({opType:q.CEIL,cpuKernelImpl:Ze}),Un={kernelName:t.Ceil,backendName:"webgpu",kernelFunc:On},Mn=function(){function e(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    ")},e}(),Vn=function(){function e(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    ")},e}();var Gn={kernelName:t.ClipByValue,backendName:"webgpu",kernelFunc:function(e){var n,a=e.inputs,r=e.backend,i=e.attrs,o=a.x,s=[{type:"float32",data:[i.clipValueMin]},{type:"float32",data:[i.clipValueMax]}];return n=t.util.sizeFromShape(o.shape)%4==0?new Mn(o.shape):new Vn(o.shape),r.runWebGPUProgram(n,[o],o.dtype,s)}},Hn=function(){function e(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  ")},e}();function Xn(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}var Kn={kernelName:t.ComplexAbs,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=t.x,r=n.tensorMap.get(a.dataId),i=new Hn(a.shape),o=[Xn(a,r.complexTensorInfos.real),Xn(a,r.complexTensorInfos.imag)];return n.runWebGPUProgram(i,o,o[0].dtype)}},qn=function(){function e(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.backend_util.computeOutShape(e,1),this.variableNames=e.map((function(e,t){return"T".concat(t)})),this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(var n=0;n<this.offsetLength;n++)this.uniforms+="offset".concat(n," : i32,");this.shaderKey="concat"}return e.prototype.getUserCode=function(){var e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(var t=1;t<this.offsetLength;t++)e.push("else if (yC < uniforms.offset".concat([t],"){ ")+"setOutputAtCoords(coords.x, coords.y, getT".concat(t,"(yR, yC - uniforms.offset").concat(t-1,")); }"));var n=this.offsetLength,a=this.offsetLength-1;e.push("else { setOutputAtCoords(coords.x, coords.y, getT".concat(n,"(yR, yC - uniforms.offset").concat(a,")); }"))}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return"\n      ".concat(S("index")," {\n        for(var i = 0; i < ").concat(this.workPerThread,"; i = i + 1) {\n          let flatIndex = index * ").concat(this.workPerThread," + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ").concat(e.join("\n        "),"\n          }\n        }\n      }\n    ")},e}();function Yn(e){var t=e.inputs,n=e.backend,a=t.input;return xe({inputs:{x:n.tensorMap.get(a.dataId).complexTensorInfos.imag},backend:n})}var jn={kernelName:t.Imag,backendName:"webgpu",kernelFunc:Yn};function Qn(e,n,a){var r,i,o=e[0].dtype;if("complex64"===o){var u=e.map((function(e){return Wn({inputs:{input:e},backend:a})})),c=e.map((function(e){return Yn({inputs:{input:e},backend:a})})),d=Qn(u,n,a),l=Qn(c,n,a),p=we({inputs:{real:d,imag:l},backend:a});return u.forEach((function(e){return a.disposeData(e.dataId)})),c.forEach((function(e){return a.disposeData(e.dataId)})),a.disposeData(d.dataId),a.disposeData(l.dataId),p}var h=a.shouldExecuteOnCPU(e);if("string"===o&&(h=!0),h){var f=e.map((function(e){var r=t.util.sizeFromShape(e.shape.slice(n));return he({inputs:{x:e},backend:a,attrs:{shape:[-1,r]}})})),m=f.map((function(e){return{vals:a.readSync(e.dataId),shape:e.shape}})),g=t.backend_util.computeOutShape(f.map((function(e){return e.shape})),1),v=1===f[0].shape[0],y=Je(m,g,o,v),x=t.backend_util.computeOutShape(e.map((function(e){return e.shape})),n),b=a.makeTensorInfo(x,o,y);return f.forEach((function(e){return a.disposeData(e.dataId)})),b}var w=a.device.limits.maxStorageBuffersPerShaderStage-1;if(e.length>w){for(var C=[],k=0;k<e.length;k+=w){var S=e.slice(k,k+w);C.push(Qn(S,n,a))}p=Qn(C,n,a);try{for(var I=s(C),R=I.next();!R.done;R=I.next()){k=R.value;a.disposeData(k.dataId)}}catch(e){r={error:e}}finally{try{R&&!R.done&&(i=I.return)&&i.call(I)}finally{if(r)throw r.error}}return p}var P=function(e,n,a){var r=t.backend_util.computeOutShape(e.map((function(e){return e.shape})),n);return{tensors2D:e.map((function(e){return he({inputs:{x:e},backend:a,attrs:{shape:[t.util.sizeFromShape(e.shape.slice(0,n)),t.util.sizeFromShape(e.shape.slice(n))]}})})),outShape:r}}(e,n,a),z=P.tensors2D,A=P.outShape,N=z.map((function(e){return e.shape})),D=new qn(N),F=[],T=new Array(N.length-1);if(T.length>0){T[0]=N[0][1],F.push({type:"int32",data:[T[0]]});for(k=1;k<T.length;k++)T[k]=T[k-1]+N[k][1],F.push({type:"int32",data:[T[k]]})}var _=a.runWebGPUProgram(D,z,z[0].dtype,F);z.forEach((function(e){return a.disposeData(e.dataId)}));var L=he({inputs:{x:_},backend:a,attrs:{shape:A}});return a.disposeData(_.dataId),L}function Zn(e){var n=e.inputs,a=e.backend,r=e.attrs.axis,i=t.util.parseAxisParam(r,n[0].shape)[0],o=n.map((function(e){return e.shape}));t.backend_util.assertParamsConsistent(o,i);var s=t.backend_util.computeOutShape(n.map((function(e){return e.shape})),i);if(0===t.util.sizeFromShape(s))return a.makeTensorInfo(s,n[0].dtype,[]);var u=n.filter((function(e){return t.util.sizeFromShape(e.shape)>0}));return 1===u.length?xe({inputs:{x:u[0]},backend:a}):Qn(u,i,a)}var Jn={kernelName:t.Concat,backendName:"webgpu",kernelFunc:Zn};var $n=function(){function e(e,t,n,a,r,i,o,s){void 0===r&&(r=!1),void 0===i&&(i=null),void 0===o&&(o=!1),void 0===s&&(s=!1),this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=E(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=B(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),r&&(this.variableNames.push("bias"),this.variableComponents.push(4)),o&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=s,this.addBias=r,this.activation=i,this.hasPreluActivationWeights=o,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=n%this.tileBOuter==0,this.fitInner=a%this.tileInner==0,this.shaderKey="conv2DMM_".concat(this.elementsPerThread,"_").concat(this.activation,"}_").concat(this.fitAOuter,"_").concat(this.fitBOuter,"_").concat(this.fitInner,"_").concat(this.isVec4,"_").concat(this.innerElementSize,"_").concat(this.isChannelsLast,"_").concat(this.sequentialAccessByThreads)}return e.prototype.getUserCode=function(){var e=this.isVec4?ne(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):re(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return"\n    ".concat(function(e,t,n,a,r,i,o,s,u,c){void 0===r&&(r=!1),void 0===i&&(i=null),void 0===o&&(o=!1),void 0===s&&(s=4),void 0===u&&(u=4),void 0===c&&(c=4);var d=e?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",l=e?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",p=e?"uniforms.xShape[1]":"uniforms.xShape[2]",h=e?"uniforms.xShape[2]":"uniforms.xShape[3]",f=e?"row":"col",m=e?"col":"row",g="\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ".concat(e?"uniforms.outShape[2]":"uniforms.outShape[3]",";\n      let outRow = ").concat(f," / outWidth;\n      let outCol = ").concat(f," % outWidth;\n\n      let WRow = ").concat(m," / (uniforms.filterDims[1] * inChannels);\n      let WCol = ").concat(m," / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ").concat(m," % inChannels;\n      var resData = ").concat(w(s),"(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ").concat(p," && xCol >= 0 && xCol < ").concat(h,") {\n        ").concat(d,"\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ").concat(function(e){switch(e){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw new Error("innerElementSize ".concat(e," is not supported."))}}(s),"\n      }\n      return resData;"),v=e?t&&a?"\n      ".concat(g):"\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ".concat(g,"\n      }\n      return ").concat(w(s),"(0.0);"):a&&n?"\n      ".concat(g):"\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ".concat(g,"\n      }\n      return ").concat(w(s),"(0.0);"),y="".concat(function(e){switch(e){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw new Error("innerElementSize ".concat(e," is not supported."))}}(u)),x=w(c),b=w(e?s:u),C=w(e?u:s);return"\n      ".concat(J(i,o,4===c,4),"\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ").concat(b," {\n        ").concat(e?v:y,"\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ").concat(C," {\n        ").concat(e?y:v,"\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ").concat(x,") {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ").concat(e?"uniforms.outShape[2]":"uniforms.outShape[3]",";\n        ").concat(l,"\n        ").concat($(r,i),"\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }")}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2]),"\n    ").concat(e,"\n  ")},e}(),ea=function(){function e(e,t,n,a){void 0===t&&(t=!1),void 0===n&&(n=null),void 0===a&&(a=!1),this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=n,this.hasPreluActivationWeights=a,t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.shaderKey="conv2dnaive_".concat(this.activation,"_").concat(this.isChannelsLast)}return e.prototype.getUserCode=function(){return"\n       ".concat(J(this.activation,this.hasPreluActivationWeights,!1,4),"\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ").concat(this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);","\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ").concat($(this.addBias,this.activation),"\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ").concat(S("index")," {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ").concat(this.isChannelsLast?"coords[3];":"coords[1];","\n         let outRow = ").concat(this.isChannelsLast?"coords[1];":"coords[2];","\n         let outCol = ").concat(this.isChannelsLast?"coords[2];":"coords[3];","\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ").concat(this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"," xChannel = xChannel + 1) {\n               ").concat(this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);","\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     ")},e}(),ta=function(){function e(e,t){this.variableNames=["x"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey="im2col_".concat(this.isChannelsLast)}return e.prototype.getUserCode=function(){var e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?"coords[1]":"coords[2]",a=this.isChannelsLast?"coords[2]":"coords[1]",r=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return"\n    ".concat(S("index")," {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ").concat(n,";\n        let col = ").concat(a,";\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[").concat(e,"] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[").concat(t,"] && xCol >= 0) {\n            value = ").concat(r,";\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   ")},e}();function na(e,t){var n=e.length;return n>=3?c(c([],u(e.slice(0,-3)),!1),t?[e[n-3]*e[n-2],e[n-1]]:[e[n-3],e[n-2]*e[n-1]],!1):!t&&1===n&&e[0]>1?[e[0],1]:null}function aa(e){var n,a,r=e.x,i=e.filter,o=e.convInfo,d=e.backend,l=e.bias,p=void 0===l?null:l,h=e.preluActivationWeights,f=void 0===h?null:h,m=e.leakyreluAlpha,g=void 0===m?0:m,v=e.activation,y=void 0===v?null:v,x=null!=p,b=null!=f,w="channelsLast"===o.dataFormat,C=w&&o.filterHeight===o.inHeight&&o.filterWidth===o.inWidth&&"VALID"===o.padInfo.type,k=t.env().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!k&&(C||1===o.filterHeight&&1===o.filterWidth&&1===o.dilationHeight&&1===o.dilationWidth&&1===o.strideHeight&&1===o.strideWidth&&("SAME"===o.padInfo.type||"VALID"===o.padInfo.type)))return function(e){var t,n,a,r,i,o=e.x,u=e.filter,c=e.convInfo,d=e.backend,l=e.bias,p=void 0===l?null:l,h=e.preluActivationWeights,f=void 0===h?null:h,m=e.leakyreluAlpha,g=void 0===m?0:m,v=e.activation,y=void 0===v?null:v,x="channelsLast"===c.dataFormat,b=!x,w=[];if(x&&c.filterHeight===c.inHeight&&c.filterWidth===c.inWidth&&"VALID"===c.padInfo.type){var C=c.inHeight*c.inWidth*c.inChannels;a=he({inputs:{x:o},backend:d,attrs:{shape:[1,c.batchSize,C]}}),r=he({inputs:{x:u},backend:d,attrs:{shape:[1,C,c.outChannels]}})}else a=he({inputs:{x:o},backend:d,attrs:{shape:x?[c.batchSize,c.inHeight*c.inWidth,c.inChannels]:[c.batchSize,c.inChannels,c.inHeight*c.inWidth]}}),r=he({inputs:{x:u},backend:d,attrs:{shape:[1,c.inChannels,c.outChannels]}});w.push(a),w.push(r),null!=f&&null!=(i=na(f.shape,x))&&(f=he({inputs:{x:f},backend:d,attrs:{shape:i}}),w.push(f)),null!=p&&null!=(i=na(p.shape,x))&&(p=he({inputs:{x:p},backend:d,attrs:{shape:i}}),w.push(p));var k=me({a:x?a:r,b:x?r:a,transposeA:b,transposeB:!1,backend:d,bias:p,activation:y,preluActivationWeights:f,leakyreluAlpha:g}),S=he({inputs:{x:k},backend:d,attrs:{shape:c.outShape}});w.push(k);try{for(var I=s(w),R=I.next();!R.done;R=I.next()){var P=R.value;d.disposeData(P.dataId)}}catch(e){t={error:e}}finally{try{R&&!R.done&&(n=I.return)&&n.call(I)}finally{if(t)throw t.error}}return S}({x:r,filter:i,convInfo:o,backend:d,bias:p,activation:y,preluActivationWeights:f,leakyreluAlpha:g});var S,I=t.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),R=I>-1?I:d.thresholdToIncreaseWorkgroups,P=o.batchSize*Math.ceil(o.outHeight*o.outWidth/32)*Math.ceil(o.outChannels/32);if(t.env().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||P<=R)return function(e){var t,n,a=e.x,r=e.filter,i=e.convInfo,o=e.backend,u=e.bias,c=void 0===u?null:u,d=e.preluActivationWeights,l=void 0===d?null:d,p=e.leakyreluAlpha,h=void 0===p?0:p,f=e.activation,m=void 0===f?null:f,g=i.filterWidth,v=i.filterHeight,y=i.inChannels,x=i.strideWidth,b=i.strideHeight,w=i.padInfo,C=i.outWidth,k=i.outHeight,S=i.dilationWidth,I=i.dilationHeight,R="channelsLast"===i.dataFormat,P=g*v*y,z=k*C,A=R?[i.batchSize,z,P]:[i.batchSize,P,z],N=new ta(A,R),D=[{type:"int32",data:[w.top,w.left]},{type:"int32",data:[b,x]},{type:"int32",data:[I,S]},{type:"int32",data:[C]},{type:"int32",data:[y*g]},{type:"int32",data:[y]}],F=o.runWebGPUProgram(N,[a],a.dtype,D),T=[];T.push(F);var _,L=he({inputs:{x:r},backend:o,attrs:{shape:[1,P,-1]}});T.push(L),null!=l&&null!=(_=na(l.shape,R))&&(l=he({inputs:{x:l},backend:o,attrs:{shape:_}}),T.push(l)),null!=c&&null!=(_=na(c.shape,R))&&(c=he({inputs:{x:c},backend:o,attrs:{shape:_}}),T.push(c));var W=me({a:R?F:L,b:R?L:F,transposeA:!R,transposeB:!1,backend:o,bias:c,activation:m,preluActivationWeights:l,leakyreluAlpha:h}),E=he({inputs:{x:W},backend:o,attrs:{shape:i.outShape}});T.push(W);try{for(var B=s(T),O=B.next();!O.done;O=B.next()){var U=O.value;o.disposeData(U.dataId)}}catch(e){t={error:e}}finally{try{O&&!O.done&&(n=B.return)&&n.call(B)}finally{if(t)throw t.error}}return E}({x:r,filter:i,convInfo:o,backend:d,bias:p,preluActivationWeights:f,leakyreluAlpha:g,activation:y});var z=[o.padInfo.top,o.padInfo.left],A=[{type:"int32",data:[o.filterHeight,o.filterWidth]},{type:"int32",data:c([],u(z),!1)},{type:"int32",data:[o.strideHeight,o.strideWidth]},{type:"int32",data:[o.dilationHeight,o.dilationWidth]}];if(k)S=new ea(o,x,y,b);else{var N=w?o.outHeight*o.outWidth:o.outChannels,D=w?o.outChannels:o.outHeight*o.outWidth,F=o.filterHeight*o.filterWidth*o.inChannels;A.push({type:"int32",data:[N]},{type:"int32",data:[D]},{type:"int32",data:[F]});var T=d.adapterInfo.isIntel();S=new $n(o,N,D,F,x,y,b,T)}var _=[],L=[r,i];x&&(w||1!==p.shape.length||(p=he({inputs:{x:p},backend:d,attrs:{shape:[p.shape[0],1,1]}}),_.push(p)),L.push(p)),b&&(w||1!==f.shape.length||(f=he({inputs:{x:f},backend:d,attrs:{shape:[f.shape[0],1,1]}}),_.push(f)),L.push(f)),"leakyrelu"===y&&(A.push({type:"float32",data:[g]}),S.uniforms+=" alpha : f32,");var W=d.runWebGPUProgram(S,L,r.dtype,A);try{for(var E=s(_),B=E.next();!B.done;B=E.next()){var O=B.value;d.disposeData(O.dataId)}}catch(e){n={error:e}}finally{try{B&&!B.done&&(a=E.return)&&a.call(E)}finally{if(n)throw n.error}}return W}var ra={kernelName:t.Conv2D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.attrs,r=e.backend,i=n.x,o=n.filter,s=a.strides,u=a.pad,c=a.dataFormat,d=a.dilations,l=a.dimRoundingMode,p=t.backend_util.convertConv2DDataFormat(c);return aa({x:i,filter:o,convInfo:t.backend_util.computeConv2DInfo(i.shape,o.shape,s,d,u,l,!1,p),backend:r})}},ia=function(){function e(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=this.isChannelsLast&&e.outChannels%4==0&&e.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey="conv2DDerInput_".concat(this.isChannelsLast,"_").concat(this.isVec4,"_").concat(this.workPerThread)}return e.prototype.getUserCode=function(){var e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?3:1,a="\n    ".concat(S()," {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ").concat(this.workPerThread,";\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ").concat(this.workPerThread,">;\n      for (var i = 0; i < ").concat(this.workPerThread,"; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ").concat(this.workPerThread,"; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    ");return this.isVec4?"\n    ".concat(a,"\n    "):"\n    ".concat(S("index")," {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[").concat(n,"];\n\n        let dyCorner = vec2<i32>(coords[").concat(e,"], coords[").concat(t,"]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ").concat(this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)",";\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  ")},e}(),oa=function(){function e(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey="conv2DDerFilter_".concat(this.isChannelsLast)}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (").concat(this.isChannelsLast,") {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  ")},e}(),sa=function(){function e(e){this.variableNames=["x","dy"],this.uniforms="pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  ")},e}(),ua=function(){function e(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  ")},e}();var ca={kernelName:t.Conv2DBackpropFilter,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.dy,s=r.strides,u=r.pad,c=r.dataFormat,d=r.dimRoundingMode,l=r.filterShape,p=t.backend_util.convertConv2DDataFormat(c),h=t.backend_util.computeConv2DInfo(i.shape,l,s,1,u,d,!1,p),f=new oa(h),m=[{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.batchSize]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.inHeight]},{type:"int32",data:[h.inWidth]}];return a.runWebGPUProgram(f,[i,o],i.dtype,m)}};var da=function(){function e(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,t.util.assert("channelsLast"===e.dataFormat,(function(){return"TODO: NCHW is unimplemented"})),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=E(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=B(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey="conv2DDerInputMM_".concat(this.isVec4,"_").concat(this.elementsPerThread)}return e.prototype.getUserCode=function(){var e=this.isVec4?ne(this.elementsPerThread,this.workgroupSize):re(this.elementsPerThread,this.workgroupSize);return"\n    ".concat(function(e){void 0===e&&(e=4);var t="\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ".concat(w(e),"(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ").concat(w(e),"(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/").concat(e,"];"),n="if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ".concat(t,"\n      }\n      return ").concat(w(e),"(0.0);");return"\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ".concat(w(e)," {\n    ").concat(n,"\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ").concat(w(e)," {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ").concat(function(e){switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error("innerElementSize ".concat(e," is not supported."))}}(e),"\n    }\n    return ").concat(w(e),"(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ").concat(w(e),") {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/").concat(e,"] = value;\n    }\n  }")}(this.isVec4?4:1),"\n    ").concat(e,"\n    ")},e}();var la={kernelName:t.Conv2DBackpropInput,backendName:"webgpu",kernelFunc:function(e){var n,a=e.inputs,r=e.backend,i=e.attrs,o=a.dy,s=a.filter,u=i.inputShape,c=i.strides,d=i.pad,l=i.dataFormat,p=i.dimRoundingMode,h=t.backend_util.convertConv2DDataFormat(l),f=t.backend_util.computeConv2DInfo(u,s.shape,c,1,d,p,!1,h),m=[{type:"int32",data:[f.filterHeight,f.filterWidth]},{type:"int32",data:[f.filterHeight-1-f.padInfo.top,f.filterWidth-1-f.padInfo.left]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.batchSize,f.outHeight,f.outWidth,f.outChannels]}];if(t.env().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==f.dataFormat)n=new ia(f);else{n=new da(f);var g=f.inHeight*f.inWidth,v=f.inChannels,y=f.filterHeight*f.filterWidth*f.outChannels;m.push({type:"uint32",data:[g]},{type:"uint32",data:[v]},{type:"uint32",data:[y]})}return r.runWebGPUProgram(n,[o,s],"float32",m)}},pa=function(){function e(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }")},e}();var ha={kernelName:t.Conv3D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=r.strides,d=r.pad,l=r.dilations,p=t.backend_util.computeConv3DInfo(i.shape,o.shape,s,l,d),h=[p.padInfo.front,p.padInfo.top,p.padInfo.left],f=[{type:"int32",data:[p.filterDepth,p.filterHeight,p.filterWidth]},{type:"int32",data:c([],u(h),!1)},{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.dilationDepth,p.dilationHeight,p.dilationWidth]}],m=new pa(p),g=t.upcastType(i.dtype,o.dtype);return a.runWebGPUProgram(m,[i,o],g,f)}};var fa={kernelName:t.Conv3DBackpropFilterV2,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.dy,s=r.strides,u=r.pad,c=r.filterShape,d=t.backend_util.computeConv3DInfo(i.shape,c,s,1,u),l=new sa(d),p=[{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.batchSize]},{type:"int32",data:[d.outDepth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"int32",data:[d.inDepth]},{type:"int32",data:[d.inHeight]},{type:"int32",data:[d.inWidth]}];return a.runWebGPUProgram(l,[i,o],o.dtype,p)}};var ma,ga={kernelName:t.Conv3DBackpropInputV2,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.dy,o=n.filter,s=r.strides,u=r.pad,c=r.inputShape,d=t.backend_util.computeConv3DInfo(c,o.shape,s,1,u),l=new ua(d),p=[{type:"int32",data:[d.filterDepth,d.filterHeight,d.filterWidth]},{type:"int32",data:[d.filterDepth-1-d.padInfo.front,d.filterHeight-1-d.padInfo.top,d.filterWidth-1-d.padInfo.left]},{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.outDepth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"int32",data:[d.outChannels]}];return a.runWebGPUProgram(l,[i,o],i.dtype,p)}},va=Se({opType:q.COS}),ya={kernelName:t.Cos,backendName:"webgpu",kernelFunc:va},xa=Se({opType:q.COSH}),ba={kernelName:t.Cosh,backendName:"webgpu",kernelFunc:xa},wa=function(){function e(e,t,n,a){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;var r=u(t,1)[0];this.outputShape=[r,n[0],n[1],e],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===a?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey="cropAndResize_".concat(this.methodId,"_").concat(this.cropHeightBiggerThan1,"_").concat(this.cropWidthBiggerThan1)}return e.prototype.getUserCode=function(){var e=u(["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],2),t=e[0],n=e[1],a=u(this.cropHeightBiggerThan1?["(".concat(t," / f32(uniforms.outShape[1] - 1))"),"(y2-y1) * height_ratio","y1*".concat(t," + f32(y)*(height_scale)")]:["0.0","0.0","0.5 * (y1+y2) * ".concat(t)],3),r=a[0],i=a[1],o=a[2],s=u(this.cropWidthBiggerThan1?["(".concat(n," / f32(uniforms.outShape[2] - 1))"),"(x2-x1) * width_ratio","x1*".concat(n," + f32(x)*(width_scale)")]:["0.0","0.0","0.5 * (x1+x2) * ".concat(n)],3),c=s[0],d=s[1],l=s[2];return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(").concat(r,");\n        let width_ratio = f32(").concat(c,");\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ").concat(i,";\n        let width_scale = ").concat(d,";\n        let in_y = ").concat(o,";\n        if( in_y < 0.0 || in_y > ").concat(t," ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ").concat(l,";\n        if( in_x < 0.0 || in_x > ").concat(n," ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(").concat(this.methodId," == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    ")},e}(),Ca={kernelName:t.CropAndResize,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.image,i=t.boxes,o=t.boxInd,s=a.cropSize,u=a.method,c=a.extrapolationValue,d=new wa(r.shape[3],i.shape,s,u),l=[{type:"float32",data:[c]}];return n.runWebGPUProgram(d,[r,i,o],"float32",l)}};!function(e){e.Prod="*",e.Sum="+"}(ma||(ma={}));var ka=function(){function e(e,t,n,a){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=n,this.reverse=a,this.op=e,this.shaderKey="cum_".concat(this.op,"_").concat(this.exclusive,"_").concat(this.reverse)}return e.prototype.getUserCode=function(){var e=this.outputShape.length,t=this.op===ma.Prod?"1.0":"0.0",n=this.exclusive?t:"getX(".concat(Sa(e,"coords",this.op),")"),a=this.outputShape[this.outputShape.length-1],r="",i="";return this.exclusive?(r=this.reverse?"end != ".concat(a-1):"end != 0",i=this.reverse?"end + 1":"end - 1"):(r=this.reverse?"end + pow2 < ".concat(a):"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),"\n      ".concat(S("index")," {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ").concat(Ia(e,"coords",this.op),";\n         var val = ").concat(n,";\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (").concat(r,") {\n           let idx = ").concat(i,";\n           ").concat(Ia(e,"coords",this.op)," = idx;\n           val ").concat(this.op,"= getX(").concat(Sa(e,"coords",this.op),");\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    ")},e}();function Sa(e,t,n){if(1===e)return"".concat(t);if(2===e)return"".concat(t,".x, ").concat(t,".y");if(3===e)return"".concat(t,".x, ").concat(t,".y, ").concat(t,".z");if(4===e)return"".concat(t,".x, ").concat(t,".y, ").concat(t,".z, ").concat(t,".w");throw Error("Cumulative ".concat(n," for rank ").concat(e," is not yet supported"))}function Ia(e,t,n){if(1===e)return"".concat(t);if(2===e)return"".concat(t,".y");if(3===e)return"".concat(t,".z");if(4===e)return"".concat(t,".w");throw Error("Cumulative ".concat(n," for rank ").concat(e," is not yet supported"))}function Ra(e,n,a,r,i,o){var s=n.shape.length,u=t.backend_util.getAxesPermutation([r],s),c=n;null!=u&&(c=Vt({inputs:{x:n},backend:a,attrs:{perm:u}}));var d=t.backend_util.getInnerMostAxes(1,s)[0];if(d!==s-1)throw new Error("WebGPU cumprod shader expects an inner-most axis=".concat(n.shape.length-1," ")+"but got axis=".concat(r));for(var l=c.shape[d],p=xe({inputs:{x:c},backend:a}),h=0;h<=Math.ceil(Math.log2(l))-1;h++){var f=new ka(e,c.shape,!1,o),m=p,g=[{type:"float32",data:[h]}];p=a.runWebGPUProgram(f,[p],p.dtype,g),a.disposeData(m.dataId)}if(i){f=new ka(e,c.shape,i,o),m=p,g=[{type:"float32",data:[0]}];p=a.runWebGPUProgram(f,[p],p.dtype,g),a.disposeData(m.dataId)}if(null!=u){var v=Vt({inputs:{x:p},backend:a,attrs:{perm:t.backend_util.getUndoAxesPermutation(u)}});return a.disposeData(p.dataId),a.disposeData(c.dataId),v}return p}var Pa={kernelName:t.Cumprod,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=a.axis,o=a.exclusive,s=a.reverse;return Ra(ma.Prod,r,n,i,o,s)}};var za={kernelName:t.Cumsum,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=a.axis,o=a.exclusive,s=a.reverse;return Ra(ma.Sum,r,n,i,o,s)}};var Aa={kernelName:t.DenseBincount,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.weights,s=r.size,u=r.binaryOutput,c=1===i.shape.length,d=t.util.sizeFromShape(o.shape)>0,l=o.dtype,p=c?[i.shape[0]]:[i.shape[0],i.shape[1]],h=le({backend:a,attrs:{shape:c?[s]:[i.shape[0],s],value:0,dtype:l}}),f=new Nn(p,d,u),m=[{type:"int32",data:[s]}],g=d?[i,o]:[i];return a.runWebGPUProgram(f,g,l,m,h)}},Na=function(){function e(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthToSpace_".concat(t),this.dataFormat=t}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ").concat(this.getHeightCoordString(),";\n          let w = ").concat(this.getWidthCoordString(),";\n          let d = ").concat(this.getDepthCoordString(),";\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ").concat(this.getOutputDepthSize(),";\n          let in_d = d + offset_d;\n\n          let rlt = ").concat(this.getInputSamplingString(),";\n          setOutputAtIndex(index, rlt);\n        }\n      }")},e.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},e.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},e.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},e.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"},e.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},e}();var Da={kernelName:t.DepthToSpace,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=a.blockSize,o=a.dataFormat,s=r.shape[0],u=("NHWC"===o?r.shape[1]:r.shape[2])*i,c=("NHWC"===o?r.shape[2]:r.shape[3])*i,d=("NHWC"===o?r.shape[3]:r.shape[1])/(i*i),l=[{type:"int32",data:[i]}],p=new Na("NHWC"===o?[s,u,c,d]:[s,d,u,c],o);return n.runWebGPUProgram(p,[r],r.dtype,l)}},Fa=function(){function e(e,t,n,a,r,i){void 0===a&&(a=!1),void 0===r&&(r=null),void 0===i&&(i=!1),this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=a,this.activation=r,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=n,this.shaderKey="depthwiseNCHW_".concat(this.activation,"_").concat(this.filterHeight,"_").concat(this.filterWidth)}return e.prototype.getUserCode=function(){var e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],n=this.workgroupSize[1]+this.filterHeight-1,a=this.workgroupSize[0]+this.filterWidth-1;return"\n      ".concat(J(this.activation,this.hasPreluActivation,!1,4),"\n\n      var<workgroup> mm_Asub : array<array<f32, ").concat(a,">, ").concat(n,">;\n      var<workgroup> mm_Bsub : array<array<f32, ").concat(this.filterWidth,">, ").concat(this.filterHeight,">;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ").concat(S()," {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ").concat(n,"; inputRow = inputRow + ").concat(this.workgroupSize[1],") {\n          for (var inputCol = localCol; inputCol < ").concat(a,"; inputCol = inputCol + ").concat(this.workgroupSize[0],") {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ").concat(e<t?"if (wIndex < ".concat(e,")"):"for(; wIndex < ".concat(e,"; wIndex = wIndex + ").concat(t,")"),"\n\n        {\n          let wRow = wIndex / ").concat(this.filterWidth,";\n          let wCol = wIndex % ").concat(this.filterWidth,";\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ").concat(this.filterHeight,"; wR = wR + 1) {\n          for (var wC = 0; wC < ").concat(this.filterWidth,"; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ").concat($(this.addBias,this.activation),"\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    ")},e}(),Ta=function(){function e(e,n,a,r){void 0===n&&(n=!1),void 0===a&&(a=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;var i=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=O(i),this.dispatch=L(this.dispatchLayout,i,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),t.util.assert("channelsLast"===e.dataFormat,(function(){return"TODO: NCHW is unimplemented"})),n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=n,this.activation=a,this.hasPreluActivation=r,this.shaderKey="depthwiseVec4_".concat(a,"_").concat(this.convInfo.filterHeight,"_").concat(this.convInfo.filterWidth,"_").concat(this.convInfo.strideHeight,"_").concat(this.convInfo.strideWidth,"_").concat(this.workPerThread)}return e.prototype.getUserCode=function(){var e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,n=this.convInfo.strideWidth;return"\n      ".concat(J(this.activation,this.hasPreluActivation,!0,4),"\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ").concat(S("index")," {\n        let width0 = uniforms.outShape[3] / ").concat(this.outputComponent,";\n        let d1 = (index % width0) * ").concat(this.outputComponent,";\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ").concat(this.workPerThread,";\n        let c = (index1 % width1) * ").concat(this.workPerThread,";\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(").concat(t,", ").concat(n,") - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ").concat(e,">;\n        var dotProd : array<vec4<f32>, ").concat(this.workPerThread,">;\n        for (var i = 0; i < ").concat(this.workPerThread,"; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ").concat(this.convInfo.filterHeight,"; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ").concat(e,"; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ").concat(this.convInfo.filterWidth,"; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ").concat(this.workPerThread,"; i++) {\n                dotProd[i] = fma(xVals[i * ").concat(n," + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ").concat(this.workPerThread,"; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ").concat($(this.addBias,this.activation),"\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    ")},e}(),_a=function(){function e(e,t,n,a){void 0===t&&(t=!1),void 0===n&&(n=null),void 0===a&&(a=!1),this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=a,this.shaderKey="depthwise_".concat(this.activation,"_").concat(this.isChannelsLast)}return e.prototype.getUserCode=function(){var e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return"\n      ".concat(J(this.activation,this.hasPreluActivation,!1,4),"\n\n      ").concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.").concat(this.isChannelsLast?"yz":"zw",") * uniforms.strides - uniforms.pads;\n          let d2 = coords[").concat(this.isChannelsLast?3:1,"];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ").concat(e,";\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ").concat(e,";\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ").concat($(this.addBias,this.activation),"\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    ")},e}();var La={kernelName:t.DepthwiseConv2dNative,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=r.strides,u=r.pad,c=r.dataFormat,d=r.dilations,l=r.dimRoundingMode,p=t.backend_util.convertConv2DDataFormat(c),h=d;null==h&&(h=[1,1]);var f,m=t.backend_util.computeConv2DInfo(i.shape,o.shape,s,h,u,l,!0,p),g=[{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.inHeight,m.inWidth]}],v="channelsLast"===m.dataFormat;return!v&&m.inHeight>16&&m.inWidth>16&&1===m.strideHeight&&1===m.strideWidth&&1===m.dilationWidth&&1===m.dilationHeight&&m.inChannels===m.outChannels?f=new Fa(m.outShape,m.filterHeight,m.filterWidth):v&&m.outHeight>4&&m.outWidth>4&&m.strideWidth<=2&&m.inChannels===m.outChannels&&1===m.dilationHeight&&1===m.dilationWidth&&m.inChannels%4==0?(f=new Ta(m),g.push({type:"int32",data:[f.virtualWidth]})):(f=new _a(m),g.push({type:"int32",data:[m.filterHeight]},{type:"int32",data:[m.filterWidth]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]})),a.runWebGPUProgram(f,[i,o],i.dtype,g)}},Wa=function(){function e(e){this.variableNames=["x","dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    ")},e}(),Ea=function(){function e(e){this.variableNames=["dy","W"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    ")},e}();var Ba={kernelName:t.DepthwiseConv2dNativeBackpropFilter,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.dy,s=r.strides,u=r.dilations,c=r.pad,d=r.dimRoundingMode,l=r.filterShape,p=t.backend_util.computeConv2DInfo(i.shape,l,s,u,c,d,!0),h=new Wa(p),f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outChannels/p.inChannels]}];return a.runWebGPUProgram(h,[i,o],"float32",f)}};var Oa={kernelName:t.DepthwiseConv2dNativeBackpropInput,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.dy,o=n.filter,s=r.strides,u=r.dilations,c=r.pad,d=r.dimRoundingMode,l=r.inputShape,p=t.backend_util.computeConv2DInfo(l,o.shape,s,u,c,d,!0),h=new Ea(p),f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.outChannels/p.inChannels]}];return a.runWebGPUProgram(h,[i,o],i.dtype,f)}},Ua=function(){function e(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    ")},e}();var Ma={kernelName:t.Diag,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=n.x,i=c(c([],u(r.shape),!1),u(r.shape),!1),o=t.util.sizeFromShape(r.shape),s=he({inputs:{x:r},backend:a,attrs:{shape:[o]}}),d=new Ua(o),l=a.runWebGPUProgram(d,[s],s.dtype),p=he({inputs:{x:l},backend:a,attrs:{shape:i}});return a.disposeData(s.dataId),a.disposeData(l.dataId),p}},Va=function(){function e(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}return e.prototype.getUserCode=function(){return"\n       ".concat(S("index")," {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     ")},e}();var Ga={kernelName:t.Dilation2D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=r.strides,d=r.pad,l=r.dilations,p=t.backend_util.computeDilation2DInfo(i.shape,o.shape,s,d,"NHWC",l),h=[p.padInfo.top,p.padInfo.left],f=[{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:c([],u(h),!1)},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]}],m=new Va(p);return a.runWebGPUProgram(m,[i,o],i.dtype,f)}},Ha=function(){function e(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=O(e.outShape),this.dispatch=L(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==t&&"int32"!==t)throw new Error("Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ".concat(t," type."));this.type=t,this.shaderKey="dilation2DBackpropInput"}return e.prototype.getUserCode=function(){return"\n       ".concat(S("index")," {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ").concat(x("&result[flatIndexIn]","value",this.type),"\n         }\n       }\n     ")},e}(),Xa=function(){function e(e,t,n){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=O(e.outShape),this.dispatch=L(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error("Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ".concat(n," type."));this.type=n,this.shaderKey="dilation2DBackpropFilter"}return e.prototype.getUserCode=function(){return"\n       ".concat(S("index")," {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ").concat(x("&result[flatIndexIn]","value",this.type),"\n         }\n       }\n     ")},e}();var Ka={kernelName:t.Dilation2DBackpropFilter,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=n.dy,u=r.strides,c=r.pad,d=r.dilations,l=t.backend_util.computeDilation2DInfo(i.shape,o.shape,u,c,"NHWC",d),p=o.dtype,h=new Xa(l,o.shape,p),f=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[t.util.sizeFromShape(l.outShape)]}],m=le({backend:a,attrs:{shape:o.shape,value:0,dtype:p}});return a.runWebGPUProgram(h,[i,o,s],p,f,m)}};var qa={kernelName:t.Dilation2DBackpropInput,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=n.dy,u=r.strides,c=r.pad,d=r.dilations,l=t.backend_util.computeDilation2DInfo(i.shape,o.shape,u,c,"NHWC",d),p=i.dtype,h=new Ha(l,p),f=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[t.util.sizeFromShape(l.outShape)]}],m=le({backend:a,attrs:{shape:l.inShape,value:0,dtype:p}});return a.runWebGPUProgram(h,[i,o,s],p,f,m)}},Ya=function(){function e(e,t,n){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=y.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=n,this.shaderKey="draw_".concat(t,"_").concat(n)}return e.prototype.getUserCode=function(){var e,t="float32"===this.type?"value":"value / 255.0";return e="\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ".concat(t,";\n        rgba[1] = ").concat(t,";\n        rgba[2] = ").concat(t,";\n      } else {\n        rgba[d] = ").concat(t,";\n      }"),"\n       @group(0) @binding(0) var outImage : texture_storage_2d<".concat(this.textureFormat,", write>;\n       ").concat(S("index")," {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ").concat(e,"\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      ")},e}();var ja={kernelName:t.Draw,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.image,i=a.canvas,o=a.options,s=u(r.shape.slice(0,2),2),c=s[0],d=s[1],l=(o||{}).imageOptions,p=(null==l?void 0:l.alpha)||1,h=n.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",f=[c,d],m=new Ya(f,r.dtype,h);i.width=d,i.height=c;var g,v="webgpu",y=i.getContext(v);y||(y=(g=new OffscreenCanvas(d,c)).getContext(v));var x=3===r.shape.length?r.shape[2]:1;y.configure({device:n.device,format:h,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});var b="int32",w=n.makeTensorInfo(f,b),C=n.tensorMap.get(w.dataId);C.resource=y.getCurrentTexture(),C.external=!0;var k=[{type:"uint32",data:[x]},{type:"float32",data:[p]}];if(n.runWebGPUProgram(m,[r],b,k,w),g){var S=i.getContext("2d");if(!S)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");S.drawImage(g,0,0)}return n.disposeData(w.dataId),r}},Qa=Ie({opType:G.MUL,cpuKernelImpl:ft,supportsComplex:!0}),Za={kernelName:t.Multiply,backendName:"webgpu",kernelFunc:Qa};function Ja(e){var t=e.inputs,n=e.backend,a=e.attrs;return Kt(t.x,a.axis,a.keepDims,"sum",n)}var $a={kernelName:t.Sum,backendName:"webgpu",kernelFunc:Ja};var er={kernelName:t.Einsum,backendName:"webgpu",kernelFunc:function(e){var n,a,r,i,o=e.inputs,u=e.backend,c=e.attrs.equation,d=o,l=t.backend_util.decodeEinsumEquation(c,d.length),p=l.allDims,h=l.summedDims,f=l.idDims;t.backend_util.checkEinsumDimSizes(p.length,f,d);for(var m=t.backend_util.getEinsumComputePath(h,f),g=m.path,v=m.steps,y=v.length,x=null,b=p.length,w=[],C=0;C<y;++C){try{for(var k=(n=void 0,s(v[C])),S=k.next();!S.done;S=k.next()){var I=S.value,R=t.backend_util.getEinsumPermutation(b,f[I]),P=R.permutationIndices,z=R.expandDims,A=void 0;t.backend_util.isIdentityPermutation(P)?A=d[I]:(A=Vt({inputs:{x:d[I]},backend:u,attrs:{perm:P}}),w.push(A));for(var N=A.shape.slice(),D=0;D<z.length;++D)N.splice(z[D],0,1);t.util.arraysEqual(A.shape,N)||(A=he({inputs:{x:A},backend:u,attrs:{shape:N}}),w.push(A)),null===x?x=A:(x=Qa({inputs:{a:A,b:x},backend:u}),w.push(x))}}catch(e){n={error:e}}finally{try{S&&!S.done&&(a=k.return)&&a.call(k)}finally{if(n)throw n.error}}C<y-1&&(g[C]>=0&&(x=Ja({inputs:{x:x},backend:u,attrs:{axis:g[C]-(p.length-b),keepDims:!1}}),w.push(x)),b--)}try{for(var F=s(w),T=F.next();!T.done;T=F.next()){var _=T.value;_!==x&&u.disposeData(_.dataId)}}catch(e){r={error:e}}finally{try{T&&!T.done&&(i=F.return)&&i.call(F)}finally{if(r)throw r.error}}return x}},tr=Se({opType:q.ELU}),nr={kernelName:t.Elu,backendName:"webgpu",kernelFunc:tr},ar={kernelName:t.EluGrad,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=t.dy,r=t.y,i=new ye(G.ELU_DER,a.shape,r.shape);return n.runWebGPUProgram(i,[a,r],a.dtype)}},rr=Ie({opType:G.EQUAL,dtype:"bool",cpuKernelImpl:$e}),ir={kernelName:t.Equal,backendName:"webgpu",kernelFunc:rr},or=Se({opType:q.ERF}),sr={kernelName:t.Erf,backendName:"webgpu",kernelFunc:or},ur=Se({opType:q.EXP,cpuKernelImpl:et,dtype:"float32"}),cr={kernelName:t.Exp,backendName:"webgpu",kernelFunc:ur};function dr(e){var n=e.inputs,a=e.attrs,r=e.backend,i=a.dim,o=n.input,s=o.shape.length,u=o.shape.slice(),c=i;return i<0&&(t.util.assert(-(s+1)<=i,(function(){return"Axis must be in the interval [".concat(-(s+1),", ").concat(s,"]")})),c=s+i+1),u.splice(c,0,1),he({inputs:{x:o},backend:r,attrs:{shape:u}})}var lr={kernelName:t.ExpandDims,backendName:"webgpu",kernelFunc:dr},pr=Se({opType:q.EXPM1,cpuKernelImpl:tt}),hr={kernelName:t.Expm1,backendName:"webgpu",kernelFunc:pr},fr=function(){function e(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey="fft_".concat(e)}return e.prototype.getUserCode=function(){var e="real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;";return"\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ".concat(e,"\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ").concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  ")},e}();function mr(e,n,a){var r=a.tensorMap.get(e.dataId),i=t.util.sizeFromShape(e.shape),o=e.shape[e.shape.length-1],s=[],u=he({inputs:{x:e},backend:a,attrs:{shape:[i/o,o]}});s.push(u);var c=u.shape,d=new fr("real",c),l=new fr("imag",c),p=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:c},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:c}],h=[{type:"float32",data:[n?2*Math.PI:-2*Math.PI]},{type:"float32",data:[n?c[1]:1]}],f=a.runWebGPUProgram(d,p,"float32",h);s.push(f);var m=a.runWebGPUProgram(l,p,"float32",h);s.push(m);var g=we({inputs:{real:f,imag:m},backend:a});s.push(g);var v=he({inputs:{x:g},backend:a,attrs:{shape:e.shape}});return s.forEach((function(e){return a.disposeData(e.dataId)})),v}var gr,vr={kernelName:t.FFT,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend;return mr(t.input,!1,n)}},yr=function(){function e(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    ")},e}(),xr={kernelName:t.FlipLeftRight,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=t.image,r=n,i=new yr(a.shape);return r.runWebGPUProgram(i,[a],a.dtype)}},br=Se({opType:q.FLOOR,cpuKernelImpl:nt}),wr={kernelName:t.Floor,backendName:"webgpu",kernelFunc:br},Cr=Ie({opType:G.FLOOR_DIV,cpuKernelImpl:at,dtype:"int32"}),kr={kernelName:t.FloorDiv,backendName:"webgpu",kernelFunc:Cr},Sr=function(){function e(e,t,n){void 0===n&&(n=!1),this.pixelsOpType=y.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=n,this.shaderKey="fromPixels_".concat(this.importVideo)}return e.prototype.getUserCode=function(){var e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)",t=this.importVideo?"texture_external":"texture_2d<f32>";return"\n      @binding(1) @group(0) var src: ".concat(t,";\n      ").concat(S("index")," {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ").concat(e,";\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  ")},e}(),Ir={kernelName:t.FromPixels,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.pixels,o=r.numChannels;if(null==i)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var s="undefined"!=typeof HTMLVideoElement&&i instanceof HTMLVideoElement,d="undefined"!=typeof HTMLImageElement&&i instanceof HTMLImageElement,l="undefined"!=typeof HTMLCanvasElement&&i instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&i instanceof OffscreenCanvas,p="undefined"!=typeof ImageBitmap&&i instanceof ImageBitmap,h=u(s?[i.videoWidth,i.videoHeight]:[i.width,i.height],2),f=h[0],m=h[1],g=[m,f,o],v=t.env().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&s,y=s||d;if(p||l||y){var x=void 0;if(v)x=a.device.importExternalTexture({source:i});else{if(y){var b=t.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=gr&&b===Rr||(Rr=b,gr=document.createElement("canvas").getContext("2d",{willReadFrequently:Rr})),gr.canvas.width=f,gr.canvas.height=m,gr.drawImage(i,0,0,f,m),i=gr.canvas}var w=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,C=a.textureManager.acquireTexture(g[1],g[0],"rgba8unorm",w);a.queue.copyExternalImageToTexture({source:i},{texture:C},[g[1],g[0]]),x=C}var k=t.util.sizeFromShape(g),S=t.util.computeStrides(g),I=new Sr(g,o,v),R=[{type:"uint32",data:[k]},{type:"uint32",data:[o]},{type:"uint32",data:c([],u(S),!1)}],P=a.makeTensorInfo([m,f],"int32");a.tensorMap.get(P.dataId).resource=x;var z=a.runWebGPUProgram(I,[P],"int32",R);return a.disposeData(P.dataId),z}var A=i.data,N=A;if(null!=o&&4!==o){N=new Uint8Array(i.width*i.height*o);for(var D=A.length,F=0,T=0;T<D;T++)T%4<o&&(N[F++]=A[T])}var _=a.makeTensorInfo(g,"int32",new Int32Array(N));return a.uploadToGPU(_.dataId),_}},Rr=t.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");var Pr=function(){function e(e,n,a,r,i){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],t.backend_util.assertAndGetBroadcastShape(e,n),t.backend_util.assertAndGetBroadcastShape(e,a),this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=r&&(t.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset")),null!=i&&(t.backend_util.assertAndGetBroadcastShape(e,i),this.variableNames.push("scale")),this.offsetShape=r,this.scaleShape=i,this.shaderKey="batchNorm"}return e.prototype.getUserCode=function(){var e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");var t="1.0";return null!=this.scaleShape&&(t="getScaleByOutputIndex(index)"),"\n      ".concat(S("index")," {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ").concat(e,";\n          let scaleValue = ").concat(t,";\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  ")},e}(),zr={kernelName:t.FusedBatchNorm,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.attrs,a=e.backend,r=t.x,i=t.scale,o=t.offset,s=t.mean,u=t.variance,c=n.varianceEpsilon,d=a,l=[r,s,u],p=null;null!=o&&(p=o.shape,l.push(o));var h=null;null!=i&&(h=i.shape,l.push(i));var f=new Pr(r.shape,s.shape,u.shape,p,h),m=[{type:"float32",data:[c]}];return d.runWebGPUProgram(f,l,r.dtype,m)}};var Ar={kernelName:t.FusedConv2D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=n.bias,u=n.preluActivationWeights,c=r.strides,d=r.pad,l=r.dataFormat,p=r.dilations,h=r.dimRoundingMode,f=r.activation,m=r.leakyreluAlpha,g=t.backend_util.convertConv2DDataFormat(l);return aa({x:i,filter:o,convInfo:t.backend_util.computeConv2DInfo(i.shape,o.shape,c,p,d,h,!1,g),backend:a,bias:s,preluActivationWeights:u,leakyreluAlpha:m,activation:f})}};var Nr={kernelName:t.FusedDepthwiseConv2D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.filter,s=n.bias,u=n.preluActivationWeights,c=r.strides,d=r.pad,l=r.dilations,p=r.dimRoundingMode,h=r.activation,f=r.leakyreluAlpha,m=l;null==m&&(m=[1,1]),t.util.assert(t.backend_util.eitherStridesOrDilationsAreOne(c,m),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be "+"1. Got strides ".concat(c," and dilations '").concat(m,"'")}));var g=t.backend_util.computeConv2DInfo(i.shape,o.shape,c,m,d,p,!0),v=[i,o],y=null!=s,x=null!=u;y&&v.push(s),x&&v.push(u);var b,w=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&1===g.dilationHeight&&1===g.dilationWidth&&g.inChannels%4==0?(b=new Ta(g,y,h,x),w.push({type:"int32",data:[b.virtualWidth]})):(b=new _a(g,y,h,x),w.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),"leakyrelu"===h&&(w.push({type:"float32",data:[f]}),b.uniforms+=" alpha : f32,"),a.runWebGPUProgram(b,v,"float32",w)}},Dr=function(){function e(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gathernd_".concat(e),this.sliceDim=e,this.uniforms="sliceDim : i32, strides : ".concat(C(e),",")}return e.prototype.getUserCode=function(){var e;return e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides","\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ").concat(e,";\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      ")},e}();var Fr={kernelName:t.GatherNd,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=n.params,i=n.indices,o=i.shape,s=o[o.length-1],c=t.util.sizeFromShape(r.shape),d=u(t.backend_util.prepareAndValidate(r,i),4),l=d[0],p=d[1],h=d[2],f=d[3],m=he({inputs:{x:i},backend:a,attrs:{shape:[p,s]}}),g=he({inputs:{x:r},backend:a,attrs:{shape:[t.util.sizeFromShape(r.shape)/h,h]}});if(a.shouldExecuteOnCPU([r,i])||"string"===r.dtype){var v=a.readSync(i.dataId),y=a.bufferSync(r),x=rt(v,y,r.dtype,p,s,h,f,r.shape,c);return a.makeTensorInfo(l,r.dtype,x.values)}var b=new Dr(s,[p,h]),w=[{type:"int32",data:[s]},{type:"int32",data:f}],C=a.runWebGPUProgram(b,[g,m],g.dtype,w),k=he({inputs:{x:C},backend:a,attrs:{shape:l}});return a.disposeData(m.dataId),a.disposeData(g.dataId),a.disposeData(C.dataId),k}},Tr=function(){function e(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}return e.prototype.getUserCode=function(){var e=function(e){for(var t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[],a=0;a<e.length;a++)2===a?n.push("indexZ"):n.push("".concat(t[a]));return n.join()}(this.aShape);return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(").concat(e,"));\n        }\n      }\n    ")},e}();function _r(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.indices,s=r.axis,u=r.batchDims,c=t.util.parseAxisParam(s,i.shape)[0],d=t.backend_util.segment_util.collectGatherOpShapeInfo(i,o,c,u),l=t.util.sizeFromShape(o.shape),p=[],h=he({inputs:{x:i},backend:a,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),f=he({inputs:{x:o},backend:a,attrs:{shape:[d.batchSize,l/d.batchSize]}});p.push(h),p.push(f);var m=[d.batchSize,d.outerSize,l/d.batchSize,d.sliceSize];if(a.shouldExecuteOnCPU([i,o])){var g=a.tensorMap.get(f.dataId).values,v=t.buffer(f.shape,f.dtype,g),y=a.tensorMap.get(h.dataId).values,x=t.buffer(h.shape,h.dtype,y),b=it(x,v,m);return p.forEach((function(e){return a.disposeData(e.dataId)})),a.makeTensorInfo(d.outputShape,b.dtype,b.values)}var w=new Tr(h.shape,m),C=a.runWebGPUProgram(w,[h,f],h.dtype);p.push(C);var k=he({inputs:{x:C},backend:a,attrs:{shape:d.outputShape}});return p.forEach((function(e){return a.disposeData(e.dataId)})),k}var Lr={kernelName:t.GatherV2,backendName:"webgpu",kernelFunc:_r},Wr=Ie({opType:G.GREATER,cpuKernelImpl:st,dtype:"bool"}),Er={kernelName:t.Greater,backendName:"webgpu",kernelFunc:Wr},Br=Ie({opType:G.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:ot}),Or={kernelName:t.GreaterEqual,backendName:"webgpu",kernelFunc:Br};var Ur={kernelName:t.IFFT,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend;return mr(t.input,!0,n)}},Mr=Se({opType:q.IS_FINITE,dtype:"bool"}),Vr={kernelName:t.IsFinite,backendName:"webgpu",kernelFunc:Mr},Gr=Se({opType:q.IS_INF,dtype:"bool"}),Hr={kernelName:t.IsInf,backendName:"webgpu",kernelFunc:Gr},Xr=Se({opType:q.IS_NAN,dtype:"bool"}),Kr={kernelName:t.IsNan,backendName:"webgpu",kernelFunc:Xr};var qr={kernelName:t.LeakyRelu,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=[{type:"float32",data:[a.alpha]}],o=new ke(r.shape,q.LEAKYRELU,"alpha : f32,");return n.runWebGPUProgram(o,[r],"float32",i)}},Yr=Ie({opType:G.LESS,dtype:"bool",cpuKernelImpl:ct}),jr={kernelName:t.Less,backendName:"webgpu",kernelFunc:Yr},Qr=Ie({opType:G.LESS_EQUAL,dtype:"bool",cpuKernelImpl:ut}),Zr={kernelName:t.LessEqual,backendName:"webgpu",kernelFunc:Qr},Jr=function(){function e(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    ")},e}();var $r={kernelName:t.LinSpace,backendName:"webgpu",kernelFunc:function(e){var t=e.backend,n=e.attrs,a=n.start,r=n.stop,i=n.num,o=(r-a)/(i-1),s=new Jr(i),u=[{type:"float32",data:[a]},{type:"float32",data:[o]}];return t.runWebGPUProgram(s,[],"float32",u)}},ei=Se({opType:q.LOG,cpuKernelImpl:dt}),ti={kernelName:t.Log,backendName:"webgpu",kernelFunc:ei},ni=Se({opType:q.LOG1P}),ai={kernelName:t.Log1p,backendName:"webgpu",kernelFunc:ni},ri=Ie({opType:G.LOGICAL_AND,dtype:"bool"}),ii={kernelName:t.LogicalAnd,backendName:"webgpu",kernelFunc:ri},oi=Se({opType:q.LOGICAL_NOT}),si={kernelName:t.LogicalNot,backendName:"webgpu",kernelFunc:oi},ui=Ie({opType:G.LOGICAL_OR}),ci={kernelName:t.LogicalOr,backendName:"webgpu",kernelFunc:ui},di="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n",li=function(){function e(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ").concat(di,"\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  ")},e}(),pi=function(){function e(e,n){var a=this;this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,t.util.assert(n<=this.maxAllowRadius,(function(){return"Radius must be less than or equal to ".concat(a.maxAllowRadius,", current radius is ").concat(n)})),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=L(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}return e.prototype.getUserCode=function(){return"\n    var <workgroup>lrnSub: array<f32, ".concat(this.workgroupSize[0],">;\n    const elementsPerWorkgroup = ").concat(this.elementsPerWorkgroup,";\n    const maxAllowRadius = ").concat(this.maxAllowRadius,";\n\n    ").concat(S()," {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ").concat(di,"\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } ")},e}();var hi={kernelName:t.LRN,backendName:"webgpu",kernelFunc:function(e){var t,n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.depthRadius,s=r.bias,u=r.alpha,c=r.beta;t=o>16?new li(i.shape):new pi(i.shape,o);var d=[{type:"int32",data:[o]},{type:"float32",data:[s]},{type:"float32",data:[u]},{type:"float32",data:[c]}];return a.runWebGPUProgram(t,[i],i.dtype,d)}},fi=function(){function e(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  ")},e}();var mi={kernelName:t.LRNGrad,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.x,i=t.y,o=t.dy,s=a.depthRadius,u=a.bias,c=a.alpha,d=a.beta,l=new fi(r.shape),p=[{type:"int32",data:[s]},{type:"float32",data:[u]},{type:"float32",data:[c]},{type:"float32",data:[d]}];return n.runWebGPUProgram(l,[r,i,o],r.dtype,p)}},gi=Ie({opType:G.MAX,cpuKernelImpl:pt}),vi={kernelName:t.Maximum,backendName:"webgpu",kernelFunc:gi};var yi={kernelName:t.MaxPool,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.filterSize,s=r.strides,u=r.pad,c=r.dimRoundingMode;return gn(i,t.backend_util.computePool2DInfo(i.shape,o,s,1,u,c),"max",a)}};var xi={kernelName:t.MaxPool3D,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.filterSize,s=r.strides,u=r.pad,c=r.dataFormat,d=r.dimRoundingMode,l=t.backend_util.computePool3DInfo(i.shape,o,s,[1,1,1],u,d,c),p=new ln(l,"max"),h=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.inDepth,l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]}];return a.runWebGPUProgram(p,[i],i.dtype,h)}},bi=function(){function e(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    ")},e}(),wi=function(){function e(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    ")},e}();var Ci={kernelName:t.MaxPool3DGrad,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.dy,o=n.input,s=r.filterSize,u=r.strides,c=r.pad,d=r.dimRoundingMode,l=t.backend_util.computePool3DInfo(o.shape,s,u,[1,1,1],c,d),p=new ln(l,"max",!0),h=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.inDepth,l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]}],f=a.runWebGPUProgram(p,[o],"int32",h),m=new wi(l);h=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.effectiveFilterDepth-1-l.padInfo.front,l.effectiveFilterHeight-1-l.padInfo.top,l.effectiveFilterWidth-1-l.padInfo.left]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]}];var g=a.runWebGPUProgram(m,[i,f],o.dtype,h);return a.disposeData(f.dataId),g}};var ki={kernelName:t.MaxPoolGrad,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.dy,o=n.input,s=o;V([o,n.output],"maxPoolGrad");var u=r.filterSize,c=r.strides,d=r.pad,l=r.dimRoundingMode,p=t.backend_util.computePool2DInfo(s.shape,u,c,1,d,l),h=new dn(p,"max",!0),f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.inHeight,p.inWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]}],m=a.runWebGPUProgram(h,[s],"int32",f),g=new bi(p);f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]}];var v=a.runWebGPUProgram(g,[i,m],s.dtype,f);return a.disposeData(m.dataId),v}};var Si={kernelName:t.MaxPoolWithArgmax,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=r.filterSize,o=r.strides,s=r.pad,u=r.includeBatchInIndex,c=n.x;t.util.assert(4===c.shape.length,(function(){return"Error in maxPool: input must be rank 4 but got rank ".concat(c.shape.length,".")}));var d=[1,1];t.util.assert(t.backend_util.eitherStridesOrDilationsAreOne(o,d),(function(){return"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(o," and dilations '").concat(d,"'")}));var l=t.backend_util.computePool2DInfo(c.shape,i,o,d,s),p=[{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]},{type:"int32",data:[l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterHeight,l.effectiveFilterWidth]}],h=new dn(l,"max",!1),f=a.runWebGPUProgram(h,[c],c.dtype,p);return h=new dn(l,"max",!0,!0,u),[f,a.runWebGPUProgram(h,[c],"int32",p)]}};var Ii={kernelName:t.Min,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs;return Kt(t.x,a.axis,a.keepDims,"min",n)}},Ri=Ie({opType:G.MIN,cpuKernelImpl:ht}),Pi={kernelName:t.Minimum,backendName:"webgpu",kernelFunc:Ri},zi=function(){function e(e,t,n){var a=this;this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((function(t,n){return t[0]+e[n]+t[1]})),this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((function(e,t){a.uniforms+=" pad".concat(t," : vec2<i32>,")})),this.offset="reflect"===n?0:1,this.shaderKey="mirrorPad_".concat(n)}return e.prototype.getUserCode=function(){var e=this.xShape.length,t=this.xShape.map((function(e,t){return"uniforms.pad".concat(t,"[0]")})).join(","),n=this.xShape.map((function(t,n){return"uniforms.pad".concat(n,"[0] + uniforms.xShape").concat(e>1?"[".concat(n,"]"):"")})).join(","),a=1===e?"start":"start[i]",r=1===e?"end":"end[i]",i=1===e?"outC":"outC[i]",o=C(e),s=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let start = ").concat(o,"(").concat(t,");\n          let end = ").concat(o,"(").concat(n,");\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ").concat(e,"; i = i + 1) {\n            if (").concat(i," < ").concat(a,") {\n              ").concat(i," = ").concat(a," * 2 - ").concat(i," - ").concat(this.offset,";\n            } else if(").concat(i," >= ").concat(r,") {\n              ").concat(i," = (").concat(r," - 1) * 2 - ").concat(i," + ").concat(this.offset,";\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(").concat(s,"));\n        }\n      }\n    ")},e}(),Ai={kernelName:t.MirrorPad,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.attrs,a=e.backend,r=t.x,i=n.paddings,o=n.mode,s=a,u=i.map((function(e){return{type:"int32",data:[e[0],e[1]]}})),c=new zi(r.shape,i,o);return s.runWebGPUProgram(c,[r],r.dtype,u)}},Ni=Ie({opType:G.MOD}),Di={kernelName:t.Mod,backendName:"webgpu",kernelFunc:Ni},Fi=function(){function e(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}return e.prototype.getUserCode=function(){return"\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  ")},e}(),Ti=function(){function e(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}return e.prototype.getUserCode=function(){return"\n    var<workgroup> buf : array<f32, ".concat(this.workgroupSize[0],">;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ").concat(this.workgroupSize[0],";\n    ").concat(S("index")," {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    ")},e}();function _i(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.logits,o=r.dim,s=he({inputs:{x:i},backend:a,attrs:{shape:[t.util.sizeFromShape(i.shape)/i.shape[o],i.shape[o]]}}),u=new Ti(s.shape),c=a.runWebGPUProgram(u,[s],i.dtype),d=he({inputs:{x:c},backend:a,attrs:{shape:i.shape}});return a.disposeData(s.dataId),a.disposeData(c.dataId),d}var Li={kernelName:t.Softmax,backendName:"webgpu",kernelFunc:_i};var Wi={kernelName:t.Multinomial,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.logits,i=a.numSamples,o=a.seed,s=a.normalized,u=s?r:_i({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),c=u.shape[0],d=u.shape[1],l=new Fi(c,i),p=[{type:"float32",data:[o]},{type:"int32",data:[d]}],h=n.runWebGPUProgram(l,[u],"int32",p);return s||n.disposeData(u.dataId),h}};var Ei={kernelName:t.Neg,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=t.x;if(n.shouldExecuteOnCPU([a])){var r=n.tensorMap.get(a.dataId),i=u(mt(r.values,a.shape,a.dtype),2),o=i[0],s=i[1];return n.makeTensorInfo(s,a.dtype,o)}var c=new ke(a.shape,q.NEG);return n.runWebGPUProgram(c,[a],a.dtype)}};var Bi={kernelName:t.NonMaxSuppressionV3,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var n=e.inputs,a=e.backend,r=e.attrs,i=n.boxes,o=n.scores,s=r.maxOutputSize,u=r.iouThreshold,c=r.scoreThreshold,d=a.readSync(i.dataId),l=a.readSync(o.dataId),p=t.kernel_impls.nonMaxSuppressionV3Impl(d,l,s,u,c).selectedIndices;return a.makeTensorInfo([p.length],"int32",new Int32Array(p))}};var Oi={kernelName:t.NonMaxSuppressionV5,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var n=e.inputs,a=e.backend,r=e.attrs,i=n.boxes,o=n.scores,s=r.maxOutputSize,u=r.iouThreshold,c=r.scoreThreshold,d=r.softNmsSigma,l=a.readSync(i.dataId),p=a.readSync(o.dataId),h=s,f=u,m=c,g=d,v=t.kernel_impls.nonMaxSuppressionV5Impl(l,p,h,f,m,g),y=v.selectedIndices,x=v.selectedScores;return[a.makeTensorInfo([y.length],"int32",new Int32Array(y)),a.makeTensorInfo([x.length],"float32",new Float32Array(x))]}},Ui=function(){function e(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    ")},e}();var Mi={kernelName:t.OneHot,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.indices,o=r.dtype,s=r.depth,d=r.onValue,l=r.offValue,p=t.util.sizeFromShape(i.shape),h=new Ui(p,s),f=he({inputs:{x:i},backend:a,attrs:{shape:[p]}}),m=[{type:"float32",data:[d]},{type:"float32",data:[l]}],g=a.runWebGPUProgram(h,[f],o,m);a.disposeData(f.dataId);var v=he({inputs:{x:g},backend:a,attrs:{shape:c(c([],u(i.shape),!1),[s],!1)}});return a.disposeData(g.dataId),v}};function Vi(e){var t=e.inputs,n=e.backend,a=t.x;if("complex64"===a.dtype){var r=Wn({inputs:{input:a},backend:n}),i=Vi({inputs:{x:r},backend:n}),o=Yn({inputs:{input:a},backend:n}),s=Vi({inputs:{x:o},backend:n}),u=we({inputs:{real:i,imag:s},backend:n});return n.disposeData(r.dataId),n.disposeData(i.dataId),n.disposeData(o.dataId),n.disposeData(s.dataId),u}return le({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}var Gi={kernelName:t.ZerosLike,backendName:"webgpu",kernelFunc:Vi};var Hi={kernelName:t.OnesLike,backendName:"webgpu",kernelFunc:function e(t){var n=t.inputs,a=t.backend,r=n.x;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){var i=Wn({inputs:{input:r},backend:a}),o=e({inputs:{x:i},backend:a}),s=Yn({inputs:{input:r},backend:a}),u=Vi({inputs:{x:s},backend:a}),c=we({inputs:{real:o,imag:u},backend:a});return a.disposeData(i.dataId),a.disposeData(o.dataId),a.disposeData(s.dataId),a.disposeData(u.dataId),c}return le({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}};var Xi={kernelName:t.Pack,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs.axis;if(1===n.length)return dr({inputs:{input:n[0]},backend:a,attrs:{dim:r}});var i=n[0].shape,o=n[0].dtype;n.forEach((function(e){t.util.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),t.util.assert(o===e.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var s=[],u=Zn({inputs:n.map((function(e){var t=dr({inputs:{input:e},backend:a,attrs:{dim:r}});return s.push(t),t})),backend:a,attrs:{axis:r}});return s.forEach((function(e){return a.disposeData(e.dataId)})),u}};function Ki(e,t){void 0===t&&(t=!1);var n=e.length,a=C(n),r=e.map((function(e,t){return"uniforms.pad".concat(t,"[0]")})).join(","),i=e.map((function(e,t){return"uniforms.pad".concat(t,"[0] + uniforms.xShape").concat(n>1?"[".concat(t,"]"):"")})).join(","),o=n>1?"".concat(a,"(").concat(r,")"):"".concat(r),s=n>1?"".concat(a,"(").concat(i,")"):"".concat(i),u=n>1?"any(paddedCoords < start)":"paddedCoords < start",c=n>1?"any(paddedCoords >= end)":"paddedCoords >= end",d=n>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n):"coords";return"\n        let start = ".concat(o,";\n        let end = ").concat(s,";\n        if (").concat(u," || ").concat(c,") {\n          setOutputAtIndex(index, ").concat(t?0:"uniforms.constantValue",");\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(").concat(d,"));\n        }\n  ")}var qi=function(){function e(e,t){var n=this;this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((function(t,n){return t[0]+e[n]+t[1]})),this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((function(e,t){n.uniforms+=" pad".concat(t," : vec2<i32>,")})),this.xShape=e,this.shaderKey="pad"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ").concat(Ki(this.xShape),"\n        }\n      }\n    ")},e}(),Yi={kernelName:t.PadV2,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.paddings,s=r.constantValue;if(o.every((function(e){return t.util.arraysEqual(e,[0,0])})))return xe({inputs:{x:i},backend:a});if(0===t.util.sizeFromShape(i.shape))return le({backend:a,attrs:{shape:o.map((function(e,t){return e[0]+i.shape[t]+e[1]})),value:s,dtype:i.dtype}});var u=[{type:"float32",data:[s]}];o.map((function(e){return u.push({type:"int32",data:[e[0],e[1]]})}));var c=new qi(i.shape,o);return a.runWebGPUProgram(c,[i],i.dtype,u)}},ji=Ie({opType:G.POW}),Qi={kernelName:t.Pow,backendName:"webgpu",kernelFunc:ji};var Zi={kernelName:t.Prelu,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=t.x,r=t.alpha,i=new ye(G.PRELU,a.shape,r.shape);return n.runWebGPUProgram(i,[a,r],"float32")}};var Ji={kernelName:t.Prod,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs;return Kt(t.x,a.axis,a.keepDims,"prod",n)}},$i={kernelName:t.Range,backendName:"webgpu",kernelFunc:function(e){var t=e.backend,n=e.attrs,a=n.start,r=n.stop,i=n.step,o=n.dtype,s=yt(a,r,i,o);return t.makeTensorInfo([s.length],o,s)}},eo=Ie({opType:G.DIV}),to={kernelName:t.RealDiv,backendName:"webgpu",kernelFunc:eo},no=Se({opType:q.RECIPROCAL}),ao={kernelName:t.Reciprocal,backendName:"webgpu",kernelFunc:no},ro=Se({opType:q.RELU}),io={kernelName:t.Relu,backendName:"webgpu",kernelFunc:ro},oo=Se({opType:q.RELU6}),so={kernelName:t.Relu6,backendName:"webgpu",kernelFunc:oo},uo=function(){function e(e,t,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    ")},e}();var co={kernelName:t.ResizeBilinear,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.images,i=a.alignCorners,o=a.size,s=a.halfPixelCenters,c=u(o,2),d=c[0],l=c[1],p=[{type:"float32",data:[i&&d>1?1:0,i&&l>1?1:0]},{type:"float32",data:[s?.5:0]}],h=new uo(r.shape,d,l);return n.runWebGPUProgram(h,[r],"float32",p)}},lo=function(){function e(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey="resizeBilinearBackprop_".concat(t)}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    ")},e}();var po={kernelName:t.ResizeBilinearGrad,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.images,i=t.dy,o=a.alignCorners,s=u(r.shape,3),c=s[1],d=s[2],l=u(i.shape,3),p=l[1],h=l[2],f=[o&&p>1?c-1:c,o&&h>1?d-1:d],m=[o&&p>1?p-1:p,o&&h>1?h-1:h],g=f[0]/m[0],v=f[1]/m[1],y=1/g,x=1/v,b=2*Math.ceil(y)+2,w=2*Math.ceil(x)+2,C=new lo(r.shape,o),k=[{type:"int32",data:f},{type:"int32",data:m},{type:"float32",data:[g]},{type:"float32",data:[v]},{type:"float32",data:[y]},{type:"float32",data:[x]},{type:"int32",data:[b]},{type:"int32",data:[w]}];return n.runWebGPUProgram(C,[i],i.dtype,k)}},ho=function(){function e(e,t,n,a){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=a,this.shaderKey="resizeNearest_".concat(a)}return e.prototype.getUserCode=function(){var e;return e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC","\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ").concat(e,";\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    ")},e}();var fo={kernelName:t.ResizeNearestNeighbor,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.images,i=a.alignCorners,o=a.halfPixelCenters,s=u(a.size,2),c=s[0],d=s[1],l=[{type:"float32",data:[i&&c>1?1:0,i&&d>1?1:0]},{type:"float32",data:[i?.5:0]}],p=new ho(r.shape,c,d,o);return n.runWebGPUProgram(p,[r],r.dtype,l)}},mo=function(){function e(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey="resizeNearestNeigborBackprop_".concat(t)}return e.prototype.getUserCode=function(){return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ").concat(this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)","));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ").concat(this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)","));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    ")},e}();var go={kernelName:t.ResizeNearestNeighborGrad,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.images,i=t.dy,o=a.alignCorners,s=u(r.shape,3),c=s[1],d=s[2],l=u(i.shape,3),p=l[1],h=l[2],f=[o&&p>1?c-1:c,o&&h>1?d-1:d],m=[o&&p>1?p-1:p,o&&h>1?h-1:h],g=1/(f[0]/m[0]),v=1/(f[1]/m[1]),y=2*Math.ceil(g)+2,x=2*Math.ceil(v)+2,b=new mo(r.shape,o),w=[{type:"int32",data:f},{type:"int32",data:m},{type:"float32",data:[g]},{type:"float32",data:[v]},{type:"int32",data:[y]},{type:"int32",data:[x]}];return n.runWebGPUProgram(b,[i],i.dtype,w)}},vo=function(){function e(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}return e.prototype.getUserCode=function(){return"\n      ".concat("\n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    ","\n      ").concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    ")},e}();var yo={kernelName:t.Reverse,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.dims,s=i.shape.length;if(0===s)return xe({inputs:{x:i},backend:a});var u=i.shape,c=[1,1,1,1];u.forEach((function(e,t){c[t+4-s]=e}));var d=t.util.parseAxisParam(o,i.shape),l=[0,0,0,0];d.forEach((function(e){l[e+4-s]=1}));var p=[{type:"int32",data:l}],h=he({inputs:{x:i},backend:a,attrs:{shape:c}}),f=new vo(c),m=a.runWebGPUProgram(f,[h],h.dtype,p);a.disposeData(h.dataId);var g=he({inputs:{x:m},backend:a,attrs:{shape:u}});return a.disposeData(m.dataId),g}},xo=function(){function e(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}return e.prototype.getUserCode=function(){return"\n        ".concat(S("index")," {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ").concat(this.fillSnippet,"\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      ")},e}(),bo={kernelName:t.RotateWithOffset,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.attrs,r=e.backend,i=n.image,o=a.radians,s=a.fillValue,c=a.center,d=r,l=new xo(i.shape,s),p=u(t.backend_util.getImageCenter(c,i.shape[1],i.shape[2]),2),h=[{type:"float32",data:[p[0]]},{type:"float32",data:[p[1]]},{type:"float32",data:[Math.sin(o)]},{type:"float32",data:[Math.cos(o)]}];return"number"==typeof s?h.push({type:"float32",data:[Number.parseFloat(s.toFixed(2))]}):h.push({type:"float32",data:s}),d.runWebGPUProgram(l,[i],i.dtype,h)}},wo=Se({opType:q.ROUND}),Co={kernelName:t.Round,backendName:"webgpu",kernelFunc:wo},ko=Se({opType:q.RSQRT,cpuKernelImpl:xt}),So={kernelName:t.Rsqrt,backendName:"webgpu",kernelFunc:ko},Io=function(){function e(e,t,n,a,r,i,o,s){void 0===s&&(s=!0),this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=o,this.sumDupeIndices=s,this.dispatchLayout=O(e),this.dispatch=L(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey="scatter_".concat(n,"_").concat(a,"_").concat(this.sliceDimGreaterThanOne,"_").concat(o,"_").concat(s,"_").concat(r.length);var u=C(r.length);this.uniforms="sliceDim : i32, strides: ".concat(u,", updatesSize: i32,"),this.updatesRank=a,this.indicesRank=n}return e.prototype.getUserCode=function(){var e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");var t="getIndices(".concat(e,")"),n=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",a="",r="";1===this.dispatchLayout.x.length?(a="flattenedIndex",r="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(a="vec2<i32>(flattenedIndex, coords[1])",r="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");var i=Array.from({length:this.updatesRank},(function(e,t){return"coords[".concat(t,"]")})),o="getUpdates(".concat(i.join(", "),")");return"\n    ".concat(r,"\n      ").concat(S("index")," {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(").concat(t,"));\n            flattenedIndex = flattenedIndex + indexInside * ").concat(n,";\n          }\n          let updateValue =\n              ").concat(D(this.type),"(").concat(o,");\n          let flatIndex = getOutputIndexFromCoords(").concat(a,");\n\n          ").concat(this.sumDupeIndices?x("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));","\n        }\n      }")},e}();var Ro={kernelName:t.ScatterNd,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.indices,o=n.updates,s=r.shape,u=t.backend_util.calculateShapes(o,i,s),c=u.sliceRank,d=u.numUpdates,l=u.sliceSize,p=u.strides,h=u.outputSize,f=[h/l,l];if(0===h)return a.makeTensorInfo(s,i.dtype);var m=he({inputs:{x:i},backend:a,attrs:{shape:[d,c]}}),g=he({inputs:{x:o},backend:a,attrs:{shape:[d,l]}}),v=g.dtype,y=le({backend:a,attrs:{shape:f,value:0,dtype:v}}),x=[{type:"int32",data:[c]},{type:"int32",data:p},{type:"int32",data:[t.util.sizeFromShape(g.shape)]}],b=new Io(g.shape,c,m.shape.length,g.shape.length,p,f,v),w=a.runWebGPUProgram(b,[g,m],v,x,y),C=he({inputs:{x:w},backend:a,attrs:{shape:s}});return a.disposeData(m.dataId),a.disposeData(g.dataId),a.disposeData(w.dataId),C}},Po=function(){function e(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey="search_sorted_".concat(t)}return e.prototype.getUserCode=function(){var e="left"===this.side?"<":"<=";return"\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ".concat(e," value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ").concat(S("index")," {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    ")},e}();var zo={kernelName:t.SearchSorted,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.sortedSequence,i=t.values,o=a.side,s=new Po([i.shape[0],i.shape[1]],o),u=[{type:"int32",data:[r.shape[1]]}];return n.runWebGPUProgram(s,[r,i],"int32",u)}},Ao=function(){function e(e,t,n){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=n,this.shaderKey="select"}return e.prototype.getUserCode=function(){var e,t;if(this.rank>4)throw Error("Where for rank ".concat(this.rank," is not yet supported"));if(1===this.rank)t="resRC",e="resRC";else{for(var n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],r=[],i=0;i<this.outputShape.length;i++)r.push("".concat(n[i])),i<this.cRank&&a.push("".concat(n[i]));e=a.join(),t=r.join()}return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(").concat(e,");\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(").concat(t,"));\n          } else {\n            setOutputAtIndex(index, getB(").concat(t,"));\n          }\n        }\n      }\n    ")},e}();var No={kernelName:t.Select,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=n.condition,i=n.t,o=n.e,s=new Ao(r.shape.length,i.shape,i.shape.length);return a.runWebGPUProgram(s,[r,i,o],t.upcastType(i.dtype,o.dtype))}},Do=Se({opType:q.SELU}),Fo={kernelName:t.Selu,backendName:"webgpu",kernelFunc:Do},To=Se({opType:q.SIGMOID}),_o={kernelName:t.Sigmoid,backendName:"webgpu",kernelFunc:To},Lo=Se({opType:q.SIGN}),Wo={kernelName:t.Sign,backendName:"webgpu",kernelFunc:Lo},Eo=Se({opType:q.SIN}),Bo={kernelName:t.Sin,backendName:"webgpu",kernelFunc:Eo},Oo=Se({opType:q.SINH}),Uo={kernelName:t.Sinh,backendName:"webgpu",kernelFunc:Oo},Mo=Se({opType:q.SOFTPLUS}),Vo={kernelName:t.Softplus,backendName:"webgpu",kernelFunc:Mo},Go=function(){function e(e,t,n,a,r,i){var o=this;this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;for(var s=new Array(a.length),u=0;u<s.length;u++)s[u]=a[r[u]];this.outputShape=s,this.newDim=r,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+="reshapedPaddedXShape : ".concat(C(a.length),", paddedXShapeStrides : ").concat(C(i),", "),n.map((function(e,t){o.uniforms+=" pad".concat(t," : vec2<i32>,")})),this.shaderKey="spaceToBatchND_".concat(r)}return e.prototype.getUserCode=function(){var e=C(this.outputShape.length),t=Mt(this.newDim);return"\n      ".concat(z(this.paddedXShape,"PaddedX"),"\n      ").concat(S("index")," {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords").concat(this.outputShape.length,"D(").concat(e,"(").concat(t,"), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ").concat(Ki(this.xShape,!0),"\n        }\n      }\n    ")},e}(),Ho={kernelName:t.SpaceToBatchND,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.blockShape,s=r.paddings;t.util.assert(i.shape.length<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet"}));var d=o.reduce((function(e,t){return e*t})),l=[[0,0]];l.push.apply(l,c([],u(s),!1));for(var p=1+o.length;p<i.shape.length;++p)l.push([0,0]);var h=l.map((function(e,t){return e[0]+i.shape[t]+e[1]})),f=t.backend_util.getReshaped(h,o,d,!1),m=t.backend_util.getPermuted(f.length,o.length,!1),g=t.backend_util.getReshapedPermuted(h,o,d,!1),v=t.util.computeStrides(h),y=new Go(i.shape,h,l,f,m,v.length),x=[{type:"int32",data:f},{type:"int32",data:v}];l.map((function(e){return x.push({type:"int32",data:[e[0],e[1]]})}));var b=a.runWebGPUProgram(y,[i],i.dtype,x),w=he({inputs:{x:b},backend:a,attrs:{shape:g}});return a.disposeData(b.dataId),w}},Xo=function(){function e(e,t,n){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=n,this.dispatchLayout=O([t]),this.dispatch=L(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ").concat(x("&result[outIndex]","value",this.type),"\n      }\n    }\n  ")},e}(),Ko=function(){function e(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=O(t),this.dispatch=L(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ").concat(x("&result[segmentId]","1","int32"),"\n      }\n    }\n  ")},e}(),qo=function(){function e(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=O(e),this.dispatch=L(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ").concat("float32"===this.type?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);","\n        }\n      }\n    }\n  ")},e}();function Yo(e,n,a,r,i){void 0===r&&(r=!1);var o,s=t.util.sizeFromShape(e.shape)/e.shape[0],u=e.dtype,c=t.util.sizeFromShape(n.shape),d=i.readSync(a.dataId),l=c>0?d[c-1]+1:0,p=e.shape.slice();p[0]=l;var h=c*s,f=le({backend:i,attrs:{shape:p,value:0,dtype:u}});o=new Xo(p,h,u);var m=[{type:"int32",data:[s]},{type:"int32",data:[h]}],g=i.runWebGPUProgram(o,[e,n,a],u,m,f);if(r)return g;var v=le({backend:i,attrs:{shape:[l],value:0,dtype:"int32"}});o=new Ko(l,a.shape);var y=i.runWebGPUProgram(o,[a],"int32",null,v),x=le({backend:i,attrs:{shape:p,value:0,dtype:u}});o=new qo(p,u),m=[{type:"int32",data:[s]}];var b=i.runWebGPUProgram(o,[g,y],u,m,x);return i.disposeData(g.dataId),i.disposeData(y.dataId),b}var jo={kernelName:t.SparseSegmentMean,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend;return Yo(t.data,t.indices,t.segmentIds,!1,n)}};var Qo={kernelName:t.SparseSegmentSum,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend;return Yo(t.data,t.indices,t.segmentIds,!0,n)}},Zo=function(){function e(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;for(var n=new Array(e.length),a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}return e.prototype.getUserCode=function(){var e=function(e,t){void 0===t&&(t="");if(e>=5)throw Error("Tile for rank ".concat(e," is not yet supported"));if(1===e)return"(resRC % ".concat(t,"aShape)");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],r=0;r<e;r++)a.push("(".concat(n[r]," % ").concat(t,"aShape[").concat(r,"])"));return a.join()}(this.rank,"uniforms.");return"\n      ".concat(S("index")," {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(").concat(e,"));\n        }\n      }\n    ")},e}();function Jo(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.reps;if(a.shouldExecuteOnCPU([i])||"string"===i.dtype||i.shape.length>=5){var s=a.readSync(i.dataId),u="string"===i.dtype?s.map((function(e){return t.util.decodeString(e)})):s,c=t.buffer(i.shape,i.dtype,u),d=Rt(c,o);return a.makeTensorInfo(d.shape,d.dtype,d.values)}var l=new Zo(i.shape,o);return a.runWebGPUProgram(l,[i],i.dtype)}var $o={kernelName:t.Tile,backendName:"webgpu",kernelFunc:Jo};var es={kernelName:t.SparseToDense,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.sparseIndices,o=n.sparseValues,s=n.defaultValue,u=r.outputShape,c=t.backend_util.calculateShapes(o,i,u),d=c.sliceRank,l=c.numUpdates,p=c.sliceSize,h=c.strides,f=c.outputSize,m=!1;if("string"===o.dtype){var g=a.bufferSync(i),v=a.bufferSync(o),y=t.util.decodeString(a.readSync(s.dataId)[0]),x=bt(g,v,u,f,p,l,d,h,y,m);return a.makeTensorInfo(u,x.dtype,x.values)}var b=[f/p,p],w=he({inputs:{x:i},backend:a,attrs:{shape:[l,d]}}),C=o.shape.length?he({inputs:{x:o},backend:a,attrs:{shape:[l,p]}}):xe({inputs:{x:o},backend:a}),k=C.dtype,S=a.makeTensorInfo([],k,t.util.makeZerosTypedArray(1,k)),I=he({inputs:{x:s},backend:a,attrs:{shape:Array(b.length).fill(1)}}),R=Jo({inputs:{x:I},backend:a,attrs:{reps:b}}),P=[{type:"int32",data:[d]},{type:"int32",data:h},{type:"int32",data:[t.util.sizeFromShape([l,p])]}];switch(l){case 0:break;case 1:var z=new Io([l,p],d,w.shape.length,C.shape.length,h,b,k,m);a.runWebGPUProgram(z,[C,w],k,P,R);break;default:z=new Io([l,p],d,w.shape.length,S.shape.length,h,b,k,m);a.runWebGPUProgram(z,[S,w],k,P,R);z=new Io([l,p],d,w.shape.length,C.shape.length,h,b,k);a.runWebGPUProgram(z,[C,w],k,P,R)}var A=he({inputs:{x:R},backend:a,attrs:{shape:u}});return a.disposeData(w.dataId),a.disposeData(C.dataId),a.disposeData(I.dataId),a.disposeData(S.dataId),a.disposeData(R.dataId),A}};var ts={kernelName:t.SplitV,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.numOrSizeSplits,s=r.axis,d=t.util.parseAxisParam(s,i.shape)[0],l=t.backend_util.prepareSplitSize(i,o,d),p=i.shape.length,h=new Array(p).fill(0),f=i.shape.slice();return l.map((function(e){var t=c([],u(f),!1);t[d]=e;var n=Rn({inputs:{x:i},backend:a,attrs:{begin:h,size:t}});return h[d]+=e,n}))}},ns=Se({opType:q.SQRT}),as={kernelName:t.Sqrt,backendName:"webgpu",kernelFunc:ns},rs={kernelName:t.Square,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=t.x,r=n,i=new ke(a.shape,q.SQUARE);return r.runWebGPUProgram(i,[a],a.dtype)}},is=Ie({opType:G.SQUARED_DIFFERENCE}),os={kernelName:t.SquaredDifference,backendName:"webgpu",kernelFunc:is};var ss={kernelName:t.Step,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.attrs,a=e.backend,r=t.x,i=new ke(r.shape,q.STEP,"stepAlpha : f32,"),o=[{type:"float32",data:[n.alpha]}];return a.runWebGPUProgram(i,[r],r.dtype,o)}},us=function(){function e(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);var t=C(this.outputShape.length);this.uniforms="begin : ".concat(t,",  strides : ").concat(t,", "),this.shaderKey="stridedSlice"}return e.prototype.getUserCode=function(){var e=this,t="";if(1===this.outputShape.length)t="coords * uniforms.strides + uniforms.begin";else{var n=0;t=this.outputShape.map((function(t,a){return n++,1===e.outputShape.length?"coords * uniforms.strides[".concat(a,"] + uniforms.begin[").concat(a,"]"):"coords[".concat(n-1,"] * uniforms.strides[").concat(a,"] + uniforms.begin[").concat(a,"]")})).join(",")}return"\n       ".concat(S("index")," {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(").concat(t,"));\n         }\n       }\n     ")},e}();var cs={kernelName:t.StridedSlice,backendName:"webgpu",kernelFunc:function(e){var n,a=e.inputs,r=e.backend,i=e.attrs,o=a.x,s=i.begin,u=i.end,c=i.strides,d=i.beginMask,l=i.endMask,p=i.ellipsisMask,h=i.newAxisMask,f=i.shrinkAxisMask,m=t.slice_util.sliceInfo(o.shape,s,u,c,d,l,p,h,f),g=m.finalShapeSparse,v=m.finalShape,y=m.isIdentity,x=m.sliceDim0,b=m.isSimpleSlice,w=m.begin,C=m.end,k=m.strides;if(y)n=he({inputs:{x:o},backend:r,attrs:{shape:v}});else if(x||b){t.util.assert(o.shape.length>=1,(function(){return"Input must have rank at least 1, got: ".concat(o.shape.length)}));var S=t.slice_util.computeOutShape(w,C,k),I=Rn({inputs:{x:o},backend:r,attrs:{begin:w,size:S}});n=he({inputs:{x:I},backend:r,attrs:{shape:v}}),r.disposeData(I.dataId)}else{if(r.shouldExecuteOnCPU([o])){var R=r.readSync(o.dataId),P=t.buffer(o.shape,o.dtype,R),z=kt(g,P,k,w);n=r.makeTensorInfo(v,o.dtype,z.values)}else{var A=new us(g),N=[{type:"int32",data:w},{type:"int32",data:k}];n=he({inputs:{x:z=r.runWebGPUProgram(A,[o],o.dtype,N)},backend:r,attrs:{shape:v}}),r.disposeData(z.dataId)}}return n}};var ds={kernelName:t.StringNGrams,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=a.separator,i=a.nGramWidths,o=a.leftPad,s=a.rightPad,c=a.padWidth,d=a.preserveShortSequences,l=t.data,p=t.dataSplits,h=n.readSync(l.dataId),f=n.readSync(p.dataId),m=u(St(h,f,r,i,o,s,c,d),2),g=m[0],v=m[1];return[n.makeTensorInfo([g.length],"string",g),n.makeTensorInfo(p.shape,"int32",v)]}},ls=Ie({opType:G.SUB,cpuKernelImpl:It,supportsComplex:!0}),ps={kernelName:t.Sub,backendName:"webgpu",kernelFunc:ls},hs=Se({opType:q.TAN}),fs={kernelName:t.Tan,backendName:"webgpu",kernelFunc:hs},ms=Se({opType:q.TANH}),gs={kernelName:t.Tanh,backendName:"webgpu",kernelFunc:ms};var vs={kernelName:t.TensorScatterUpdate,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend;e.attrs;var r=n.tensor,i=n.indices,o=n.updates,s=t.backend_util.calculateShapes(o,i,r.shape),u=s.sliceRank,c=s.numUpdates,d=s.sliceSize,l=s.strides,p=s.outputSize,h=[p/d,d];if(0===p)return a.makeTensorInfo(r.shape,i.dtype);var f=[],m=he({inputs:{x:i},backend:a,attrs:{shape:[c,u]}});f.push(m);var g=he({inputs:{x:o},backend:a,attrs:{shape:[c,d]}});f.push(g);var v=he({inputs:{x:r},backend:a,attrs:{shape:h}});f.push(v);var y=Jo({inputs:{x:v},backend:a,attrs:{reps:Array(h.length).fill(1)}}),x=new Io([c,d],u,m.shape.length,g.shape.length,l,h,r.dtype,!1),b=[{type:"int32",data:[u]},{type:"int32",data:l},{type:"int32",data:[t.util.sizeFromShape([c,d])]}],w=a.runWebGPUProgram(x,[g,m],v.dtype,b,y);f.push(w);var C=he({inputs:{x:w},backend:a,attrs:{shape:r.shape}});return f.forEach((function(e){return a.disposeData(e.dataId)})),C}},ys=function(){function e(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}return e.prototype.getUserCode=function(){return"\n        ".concat(S("index")," {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      ")},e}(),xs=function(){function e(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}return e.prototype.getUserCode=function(){return"\n        ".concat(S("index")," {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      ")},e}();function bs(e,t){null!==t&&e.disposeData(t.dataId)}function ws(e){for(var t=1;t<e;)t*=2;return t}var Cs={kernelName:t.TopK,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=r.k,s=r.sorted,c=i.shape,d=c[c.length-1];if(a.shouldExecuteOnCPU([i])){var l=a.readSync(i.dataId),p=u(Pt(l,c,i.dtype,o,s),2),h=p[0],f=p[1];return[a.makeTensorInfo(h.shape,h.dtype,h.values),a.makeTensorInfo(f.shape,f.dtype,f.values)]}if(0===o)return c[c.length-1]=0,[a.makeTensorInfo(c,i.dtype,[]),a.makeTensorInfo(c,"int32",[])];if(1===d)return[i,le({attrs:{shape:c,dtype:"int32",value:0},backend:a})];for(var m=t.util.sizeFromShape(c)/d,g=he({inputs:{x:i},attrs:{shape:[m,d]},backend:a}),v=ws(o),y=ws(d),x=null,b=function(){return null===x?[g,g]:[g,x]},w=function(e,t,n){var r=b(),i=new ys(n),o=[{type:"int32",data:[d]},{type:"int32",data:[null===x?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}],s=x;x=a.runWebGPUProgram(i,r,"int32",o),bs(a,s)},C=1;C<v;C*=2)for(var k=2*C,S=C;S>=1;S/=2)w(k,S,[m,y]);for(var I=y;I>v;I/=2){var R=b(),P=new xs([m,I/2]),z=[{type:"int32",data:[d]},{type:"int32",data:[null===x?1:0]},{type:"int32",data:[v]}],A=x;x=a.runWebGPUProgram(P,R,"int32",z),bs(a,A);for(k=2*(C=v/2),S=C;S>=1;S/=2)w(k,S,x.shape)}var N=x;x=Rn({inputs:{x:x},backend:a,attrs:{begin:0,size:[m,o]}}),bs(a,N);var D=_r({inputs:{x:g,indices:x},backend:a,attrs:{axis:1,batchDims:1}});bs(a,g);var F=c.slice(0,-1);F.push(o),N=x,x=he({inputs:{x:x},attrs:{shape:F},backend:a}),bs(a,N);var T=D;return D=he({inputs:{x:D},attrs:{shape:F},backend:a}),bs(a,T),[D,x]}},ks=function(){function e(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=O(this.outputShape),this.dispatch=L(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}return e.prototype.getUserCode=function(){return"\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ".concat(S("index")," {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        ")},e}();var Ss={kernelName:t.Transform,backendName:"webgpu",kernelFunc:function(e){var t,n=e.inputs,a=e.backend,r=e.attrs,i=n.image,o=n.transforms,s=r.interpolation,c=r.fillMode,d=r.fillValue,l=r.outputShape,p=u(i.shape,4),h=p[0],f=p[1],m=p[2],g=p[3],v=u(null!=l?l:[f,m],2),y=v[0],x=v[1],b=new ks([h,y,x,g]),w="nearest"===s?1:2;switch(c){case"constant":default:t=1;break;case"reflect":t=2;break;case"wrap":t=3;break;case"nearest":t=4}var C=[{type:"int32",data:[w]},{type:"int32",data:[t]},{type:"float32",data:[d]}];return a.runWebGPUProgram(b,[i,o],"float32",C)}};var Is={kernelName:t.Unpack,backendName:"webgpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,a=e.attrs,r=t.value,i=a.axis;i<0&&(i+=r.shape.length);for(var o=r,s=o.shape.length,u=r.shape[i],c=new Array(s-1),d=0,l=0;l<s;l++)l!==i&&(c[d++]=o.shape[l]);var p=[],h=new Array(s).fill(0),f=o.shape.slice();f[i]=1;var m=new Array(u);for(l=0;l<m.length;l++){h[i]=l;var g=Rn({inputs:{x:o},backend:n,attrs:{begin:h,size:f}}),v=he({inputs:{x:g},backend:n,attrs:{shape:c}});m[l]=v,p.push(g)}return p.forEach((function(e){return n.disposeData(e.dataId)})),m}},Rs=function(){function e(e,t,n){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=O(e),this.dispatch=L(this.dispatchLayout,e,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error("UnsortedSegmentSum only supports float32 and int32\n              types, does not support ".concat(n," type."));this.type=n,this.shaderKey="unsortedSegmentSum"}return e.prototype.getUserCode=function(){return"\n    ".concat(S("index")," {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ").concat(x("&result[flatIndex]","value",this.type),"\n        }\n      }\n    }\n  ")},e}();var Ps,zs,As=[ge,Nt,Ft,_t,Wt,Bt,qt,Yt,Qt,Zt,$t,tn,an,on,un,vn,yn,wn,Cn,kn,zn,Dn,Tn,Bn,Un,Gn,Ce,Kn,Jn,ra,ca,la,ha,fa,ga,ya,ba,Ca,Pa,za,Aa,Da,Ba,Oa,La,Ma,Ga,Ka,qa,ja,er,nr,ar,ir,sr,cr,lr,hr,vr,pe,xr,Ir,wr,kr,zr,Ar,Nr,Fr,Lr,Er,Or,be,Ur,jn,Vr,Hr,Kr,qr,jr,Zr,$r,ai,ti,ii,si,ci,hi,mi,hn,vi,yi,ki,xi,Ci,Si,mn,Ii,Pi,Ai,Di,Wi,Za,Ei,Bi,Oi,Ln,Mi,Hi,Xi,Yi,Qi,Zi,Ji,$i,En,to,ao,io,so,fe,co,po,fo,go,yo,bo,Co,So,Ro,zo,No,Fo,_o,Wo,Bo,Uo,Pn,ss,cs,ds,Li,Vo,Ho,jo,Qo,es,ts,as,rs,os,ps,$a,fs,gs,vs,$o,Cs,Ss,Gt,Is,{kernelName:t.UnsortedSegmentSum,backendName:"webgpu",kernelFunc:function(e){var n=e.inputs,a=e.backend,r=e.attrs,i=n.x,o=n.segmentIds,s=r.numSegments,u=i.shape.length,c=[],d=0,l=t.backend_util.getAxesPermutation([d],u),p=i;null!=l&&(p=Vt({inputs:{x:i},backend:a,attrs:{perm:l}}),c.push(p),d=t.backend_util.getInnerMostAxes(1,u)[0]);var h=t.backend_util.segment_util.computeOutShape(p.shape,d,s),f=t.util.sizeFromShape([p.shape[d]]),m=he({inputs:{x:p},backend:a,attrs:{shape:[-1,f]}});c.push(m);var g=i.dtype,v=[m.shape[0],s],y=le({backend:a,attrs:{shape:v,value:0,dtype:g}}),x=new Rs(m.shape,v,g),b=[{type:"int32",data:[s]},{type:"int32",data:[t.util.sizeFromShape(m.shape)]}],w=a.runWebGPUProgram(x,[m,o],g,b,y),C=he({inputs:{x:w},backend:a,attrs:{shape:h}});c.push(w);var k=C;if(null!=l){c.push(C);var S=t.backend_util.getUndoAxesPermutation(l);k=Vt({inputs:{x:k},backend:a,attrs:{perm:S}})}return c.forEach((function(e){return a.disposeData(e.dataId)})),k}},Gi];try{for(var Ns=s(As),Ds=Ns.next();!Ds.done;Ds=Ns.next()){var Fs=Ds.value;t.registerKernel(Fs)}}catch(e){Ps={error:e}}finally{try{Ds&&!Ds.done&&(zs=Ns.return)&&zs.call(Ns)}finally{if(Ps)throw Ps.error}}e.WebGPUBackend=K,e.webgpu_util=H}));
//# sourceMappingURL=tf-backend-webgpu.min.js.map
