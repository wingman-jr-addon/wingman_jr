/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import * as tfliteWebAPIClient from '../tflite_web_api_client';
/** Convert proto Class array to our own Class array. */
export function convertProtoClassesToClasses(protoClasses) {
    const classes = [];
    protoClasses.forEach(cls => {
        classes.push({
            className: cls.getDisplayName() || cls.getClassName(),
            probability: cls.getScore(),
        });
    });
    return classes;
}
/** The global function to set WASM path. */
export const setWasmPath = tfliteWebAPIClient.tfweb.tflite_web_api.setWasmPath;
/** The global function to get supported WASM features */
export const getWasmFeatures = tfliteWebAPIClient.tfweb.tflite_web_api.getWasmFeatures;
/** The base class for all task library clients. */
export class BaseTaskLibraryClient {
    constructor(instance) {
        this.instance = instance;
    }
    cleanUp() {
        this.instance.cleanUp();
    }
}
/** Gets the number of threads for best performance. */
export async function getDefaultNumThreads() {
    const supportMultiThreading = (await tfliteWebAPIClient.tfweb.tflite_web_api.getWasmFeatures())
        .multiThreading;
    return supportMultiThreading ? navigator.hardwareConcurrency / 2 : -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy10ZmxpdGUvc3JjL3RmbGl0ZV90YXNrX2xpYnJhcnlfY2xpZW50L2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEtBQUssa0JBQWtCLE1BQU0sMEJBQTBCLENBQUM7QUEwQi9ELHdEQUF3RDtBQUN4RCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsWUFBMEI7SUFFckUsTUFBTSxPQUFPLEdBQVksRUFBRSxDQUFDO0lBQzVCLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNYLFNBQVMsRUFBRSxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRTtZQUNyRCxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRTtTQUM1QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCw0Q0FBNEM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO0FBRS9FLHlEQUF5RDtBQUN6RCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQ3hCLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDO0FBRTVELG1EQUFtRDtBQUNuRCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLFlBQXNCLFFBQXlCO1FBQXpCLGFBQVEsR0FBUixRQUFRLENBQWlCO0lBQUcsQ0FBQztJQUVuRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFFRCx1REFBdUQ7QUFDdkQsTUFBTSxDQUFDLEtBQUssVUFBVSxvQkFBb0I7SUFDeEMsTUFBTSxxQkFBcUIsR0FDdkIsQ0FBQyxNQUFNLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDNUQsY0FBYyxDQUFDO0lBQ3hCLE9BQU8scUJBQXFCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCAqIGFzIHRmbGl0ZVdlYkFQSUNsaWVudCBmcm9tICcuLi90ZmxpdGVfd2ViX2FwaV9jbGllbnQnO1xuaW1wb3J0IHtCYXNlVGFza0xpYnJhcnksIENsYXNzIGFzIFByb3RvQ2xhc3N9IGZyb20gJy4uL3R5cGVzL2NvbW1vbic7XG5cbi8qKiBDb21tb24gb3B0aW9ucyBmb3IgYWxsIHRhc2sgbGlicmFyeSB0YXNrcy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uVGFza0xpYnJhcnlPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgdGhyZWFkcyB0byBiZSB1c2VkIGZvciBURkxpdGUgb3BzIHRoYXQgc3VwcG9ydFxuICAgKiBtdWx0aS10aHJlYWRpbmcgd2hlbiBydW5uaW5nIGluZmVyZW5jZSB3aXRoIENQVS4gbnVtX3RocmVhZHMgc2hvdWxkIGJlXG4gICAqIGdyZWF0ZXIgdGhhbiAwIG9yIGVxdWFsIHRvIC0xLiBTZXR0aW5nIG51bV90aHJlYWRzIHRvIC0xIGhhcyB0aGUgZWZmZWN0IHRvXG4gICAqIGxldCBURkxpdGUgcnVudGltZSBzZXQgdGhlIHZhbHVlLlxuICAgKlxuICAgKiBEZWZhdWx0IHRvIG51bWJlciBvZiBwaHlzaWNhbCBDUFUgY29yZXMsIG9yIC0xIGlmIFdBU00gbXVsdGktdGhyZWFkaW5nIGlzXG4gICAqIG5vdCBzdXBwb3J0ZWQgYnkgdXNlcidzIGJyb3dzZXIuXG4gICAqL1xuICBudW1UaHJlYWRzPzogbnVtYmVyO1xufVxuXG4vKiogQSBzaW5nbGUgY2xhc3MgaW4gdGhlIGNsYXNzaWZpY2F0aW9uIHJlc3VsdC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhc3Mge1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIGNsYXNzLiAqL1xuICBjbGFzc05hbWU6IHN0cmluZztcblxuICAvKiogVGhlIHByb2JhYmlsaXR5L3Njb3JlIG9mIHRoZSBjbGFzcy4gKi9cbiAgcHJvYmFiaWxpdHk6IG51bWJlcjtcbn1cblxuLyoqIENvbnZlcnQgcHJvdG8gQ2xhc3MgYXJyYXkgdG8gb3VyIG93biBDbGFzcyBhcnJheS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0UHJvdG9DbGFzc2VzVG9DbGFzc2VzKHByb3RvQ2xhc3NlczogUHJvdG9DbGFzc1tdKTpcbiAgICBDbGFzc1tdIHtcbiAgY29uc3QgY2xhc3NlczogQ2xhc3NbXSA9IFtdO1xuICBwcm90b0NsYXNzZXMuZm9yRWFjaChjbHMgPT4ge1xuICAgIGNsYXNzZXMucHVzaCh7XG4gICAgICBjbGFzc05hbWU6IGNscy5nZXREaXNwbGF5TmFtZSgpIHx8IGNscy5nZXRDbGFzc05hbWUoKSxcbiAgICAgIHByb2JhYmlsaXR5OiBjbHMuZ2V0U2NvcmUoKSxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBjbGFzc2VzO1xufVxuXG4vKiogVGhlIGdsb2JhbCBmdW5jdGlvbiB0byBzZXQgV0FTTSBwYXRoLiAqL1xuZXhwb3J0IGNvbnN0IHNldFdhc21QYXRoID0gdGZsaXRlV2ViQVBJQ2xpZW50LnRmd2ViLnRmbGl0ZV93ZWJfYXBpLnNldFdhc21QYXRoO1xuXG4vKiogVGhlIGdsb2JhbCBmdW5jdGlvbiB0byBnZXQgc3VwcG9ydGVkIFdBU00gZmVhdHVyZXMgKi9cbmV4cG9ydCBjb25zdCBnZXRXYXNtRmVhdHVyZXMgPVxuICAgIHRmbGl0ZVdlYkFQSUNsaWVudC50ZndlYi50ZmxpdGVfd2ViX2FwaS5nZXRXYXNtRmVhdHVyZXM7XG5cbi8qKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIHRhc2sgbGlicmFyeSBjbGllbnRzLiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VUYXNrTGlicmFyeUNsaWVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbnN0YW5jZTogQmFzZVRhc2tMaWJyYXJ5KSB7fVxuXG4gIGNsZWFuVXAoKSB7XG4gICAgdGhpcy5pbnN0YW5jZS5jbGVhblVwKCk7XG4gIH1cbn1cblxuLyoqIEdldHMgdGhlIG51bWJlciBvZiB0aHJlYWRzIGZvciBiZXN0IHBlcmZvcm1hbmNlLiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERlZmF1bHROdW1UaHJlYWRzKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gIGNvbnN0IHN1cHBvcnRNdWx0aVRocmVhZGluZyA9XG4gICAgICAoYXdhaXQgdGZsaXRlV2ViQVBJQ2xpZW50LnRmd2ViLnRmbGl0ZV93ZWJfYXBpLmdldFdhc21GZWF0dXJlcygpKVxuICAgICAgICAgIC5tdWx0aVRocmVhZGluZztcbiAgcmV0dXJuIHN1cHBvcnRNdWx0aVRocmVhZGluZyA/IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5IC8gMiA6IC0xO1xufVxuIl19