/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import * as tfliteWebAPIClient from '../tflite_web_api_client';
import { BaseTaskLibraryClient, getDefaultNumThreads } from './common';
/** Different output types. */
export var OutputType;
(function (OutputType) {
    OutputType[OutputType["CATEGORY_MASK"] = 1] = "CATEGORY_MASK";
    OutputType[OutputType["CONFIDENCE_MASK"] = 2] = "CONFIDENCE_MASK";
    OutputType[OutputType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
})(OutputType || (OutputType = {}));
/**
 * Client for ImageSegmenter TFLite Task Library.
 *
 * It is a wrapper around the underlying javascript API to make it more
 * convenient to use. See comments in the corresponding type declaration file in
 * src/types for more info.
 */
export class ImageSegmenter extends BaseTaskLibraryClient {
    constructor(instance) {
        super(instance);
        this.instance = instance;
    }
    static async create(model, options) {
        const optionsProto = new tfliteWebAPIClient.tfweb.ImageSegmenterOptions();
        if (options) {
            // Set defaults.
            if (options.outputType) {
                optionsProto.setOutputType(options.outputType);
            }
            if (options.numThreads !== undefined) {
                optionsProto.setNumThreads(options.numThreads);
            }
        }
        if (!options || options.numThreads === undefined) {
            optionsProto.setNumThreads(await getDefaultNumThreads());
        }
        const instance = await tfliteWebAPIClient.tfweb.ImageSegmenter.create(model, optionsProto);
        return new ImageSegmenter(instance);
    }
    segment(input) {
        const result = this.instance.segment(input);
        if (!result) {
            return [];
        }
        const segmentations = [];
        if (result.getSegmentationList().length > 0) {
            result.getSegmentationList().forEach(seg => {
                const coloredLabels = seg.getColoredLabelsList().map(label => {
                    return {
                        r: label.getR(),
                        g: label.getG(),
                        b: label.getB(),
                        className: label.getClassName(),
                        displayName: label.getDisplayName(),
                    };
                });
                segmentations.push({
                    width: seg.getWidth(),
                    height: seg.getHeight(),
                    categoryMask: seg.getCategoryMask_asU8(),
                    coloredLabels,
                });
            });
        }
        return segmentations;
    }
}
//# sourceMappingURL=data:application/json;base64,